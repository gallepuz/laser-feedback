
FeedbackHootingV2_303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003338  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080034cc  080034cc  000134cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003504  08003504  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003504  08003504  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003504  08003504  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003504  08003504  00013504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003508  08003508  00013508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800350c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000c4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d0  200000d0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a2f8  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000018f2  00000000  00000000  0002a377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007e8  00000000  00000000  0002bc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000604  00000000  00000000  0002c458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f39c  00000000  00000000  0002ca5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ae6d  00000000  00000000  0004bdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bdd20  00000000  00000000  00056c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001f3c  00000000  00000000  00114988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008f  00000000  00000000  001168c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080034b4 	.word	0x080034b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080034b4 	.word	0x080034b4

080001d4 <send_OK>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t send_buffer[1];
uint8_t receive_buffer[sizeof(float)];

void send_OK() {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	send_buffer[0] = OK;
 80001d8:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <send_OK+0x1c>)
 80001da:	2201      	movs	r2, #1
 80001dc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, send_buffer, 1, SERIAL_TIMEOUT);
 80001de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e2:	2201      	movs	r2, #1
 80001e4:	4902      	ldr	r1, [pc, #8]	; (80001f0 <send_OK+0x1c>)
 80001e6:	4803      	ldr	r0, [pc, #12]	; (80001f4 <send_OK+0x20>)
 80001e8:	f002 fbfa 	bl	80029e0 <HAL_UART_Transmit>
}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	200000c4 	.word	0x200000c4
 80001f4:	2000003c 	.word	0x2000003c

080001f8 <send_FAIL>:

void send_FAIL() {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	send_buffer[0] = FAIL;
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <send_FAIL+0x1c>)
 80001fe:	2200      	movs	r2, #0
 8000200:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, send_buffer, 1, SERIAL_TIMEOUT);
 8000202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000206:	2201      	movs	r2, #1
 8000208:	4902      	ldr	r1, [pc, #8]	; (8000214 <send_FAIL+0x1c>)
 800020a:	4803      	ldr	r0, [pc, #12]	; (8000218 <send_FAIL+0x20>)
 800020c:	f002 fbe8 	bl	80029e0 <HAL_UART_Transmit>
}
 8000210:	bf00      	nop
 8000212:	bd80      	pop	{r7, pc}
 8000214:	200000c4 	.word	0x200000c4
 8000218:	2000003c 	.word	0x2000003c

0800021c <send_UNKNOWN>:

void send_UNKNOWN() {
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	send_buffer[0] = UNKNOWN_COMMAND;
 8000220:	4b05      	ldr	r3, [pc, #20]	; (8000238 <send_UNKNOWN+0x1c>)
 8000222:	2203      	movs	r2, #3
 8000224:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, send_buffer, 1, SERIAL_TIMEOUT);
 8000226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800022a:	2201      	movs	r2, #1
 800022c:	4902      	ldr	r1, [pc, #8]	; (8000238 <send_UNKNOWN+0x1c>)
 800022e:	4803      	ldr	r0, [pc, #12]	; (800023c <send_UNKNOWN+0x20>)
 8000230:	f002 fbd6 	bl	80029e0 <HAL_UART_Transmit>
}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	200000c4 	.word	0x200000c4
 800023c:	2000003c 	.word	0x2000003c

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000246:	f000 fae5 	bl	8000814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024a:	f000 f88f 	bl	800036c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024e:	f000 f945 	bl	80004dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000252:	f000 f913 	bl	800047c <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000256:	f000 f8e7 	bl	8000428 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800025a:	2100      	movs	r1, #0
 800025c:	483f      	ldr	r0, [pc, #252]	; (800035c <main+0x11c>)
 800025e:	f000 fc8f 	bl	8000b80 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0x0FFF/2);
 8000262:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000266:	2200      	movs	r2, #0
 8000268:	2100      	movs	r1, #0
 800026a:	483c      	ldr	r0, [pc, #240]	; (800035c <main+0x11c>)
 800026c:	f000 fc63 	bl	8000b36 <HAL_DAC_SetValue>
  HAL_GPIO_WritePin(RESET_PULLDOWN_GPIO_Port, RESET_PULLDOWN_Pin, GPIO_PIN_SET);	//was zero at init for safety
 8000270:	2201      	movs	r2, #1
 8000272:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027a:	f000 fea3 	bl	8000fc4 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (HAL_UART_Receive(&huart2, receive_buffer, 1, SERIAL_TIMEOUT) == HAL_OK) {
 800027e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000282:	2201      	movs	r2, #1
 8000284:	4936      	ldr	r1, [pc, #216]	; (8000360 <main+0x120>)
 8000286:	4837      	ldr	r0, [pc, #220]	; (8000364 <main+0x124>)
 8000288:	f002 fc34 	bl	8002af4 <HAL_UART_Receive>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d1f5      	bne.n	800027e <main+0x3e>
		switch (receive_buffer[0]) {
 8000292:	4b33      	ldr	r3, [pc, #204]	; (8000360 <main+0x120>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	2b04      	cmp	r3, #4
 8000298:	d85b      	bhi.n	8000352 <main+0x112>
 800029a:	a201      	add	r2, pc, #4	; (adr r2, 80002a0 <main+0x60>)
 800029c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002a0:	080002b5 	.word	0x080002b5
 80002a4:	08000353 	.word	0x08000353
 80002a8:	080002bb 	.word	0x080002bb
 80002ac:	08000309 	.word	0x08000309
 80002b0:	08000335 	.word	0x08000335
		case CHECK:
			send_OK();
 80002b4:	f7ff ff8e 	bl	80001d4 <send_OK>
			break;
 80002b8:	e04e      	b.n	8000358 <main+0x118>

		case PULSE:
			// This creates an approx 600ns pulse, enough to set the latch.
			HAL_Delay(0);	//Wait 1ms, sync to systick, do not remove. Makes single/first pulse consistent when in failsafe
 80002ba:	2000      	movs	r0, #0
 80002bc:	f000 fb10 	bl	80008e0 <HAL_Delay>
			HAL_GPIO_WritePin(SET_GPIO_Port, SET_Pin, GPIO_PIN_RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2120      	movs	r1, #32
 80002c4:	4828      	ldr	r0, [pc, #160]	; (8000368 <main+0x128>)
 80002c6:	f000 fe7d 	bl	8000fc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SET_GPIO_Port, SET_Pin, GPIO_PIN_SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2120      	movs	r1, #32
 80002ce:	4826      	ldr	r0, [pc, #152]	; (8000368 <main+0x128>)
 80002d0:	f000 fe78 	bl	8000fc4 <HAL_GPIO_WritePin>
			HAL_Delay(1); 	//2ms fail safe time, if the comparator has not reset the laser output by now...
 80002d4:	2001      	movs	r0, #1
 80002d6:	f000 fb03 	bl	80008e0 <HAL_Delay>
			HAL_GPIO_WritePin(RESET_PULLDOWN_GPIO_Port, RESET_PULLDOWN_Pin, GPIO_PIN_RESET); // ..we reset the latch
 80002da:	2200      	movs	r2, #0
 80002dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e4:	f000 fe6e 	bl	8000fc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RESET_PULLDOWN_GPIO_Port, RESET_PULLDOWN_Pin, GPIO_PIN_SET);
 80002e8:	2201      	movs	r2, #1
 80002ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f2:	f000 fe67 	bl	8000fc4 <HAL_GPIO_WritePin>
			send_OK();
 80002f6:	f7ff ff6d 	bl	80001d4 <send_OK>
			HAL_GPIO_WritePin(RESET_PULLDOWN_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2120      	movs	r1, #32
 80002fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000302:	f000 fe5f 	bl	8000fc4 <HAL_GPIO_WritePin>
			break;
 8000306:	e027      	b.n	8000358 <main+0x118>

		case SET_DAC:
			uint16_t value;
			if (HAL_UART_Receive(&huart2, (uint8_t *) &value, 2, SERIAL_TIMEOUT) == HAL_OK) {
 8000308:	1db9      	adds	r1, r7, #6
 800030a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800030e:	2202      	movs	r2, #2
 8000310:	4814      	ldr	r0, [pc, #80]	; (8000364 <main+0x124>)
 8000312:	f002 fbef 	bl	8002af4 <HAL_UART_Receive>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d108      	bne.n	800032e <main+0xee>
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 800031c:	88fb      	ldrh	r3, [r7, #6]
 800031e:	2200      	movs	r2, #0
 8000320:	2100      	movs	r1, #0
 8000322:	480e      	ldr	r0, [pc, #56]	; (800035c <main+0x11c>)
 8000324:	f000 fc07 	bl	8000b36 <HAL_DAC_SetValue>
				send_OK();
 8000328:	f7ff ff54 	bl	80001d4 <send_OK>
			} else {
				send_FAIL();
			}
			break;
 800032c:	e014      	b.n	8000358 <main+0x118>
				send_FAIL();
 800032e:	f7ff ff63 	bl	80001f8 <send_FAIL>
			break;
 8000332:	e011      	b.n	8000358 <main+0x118>

		case RST:
			HAL_GPIO_WritePin(RESET_PULLDOWN_GPIO_Port, RESET_PULLDOWN_Pin, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800033a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033e:	f000 fe41 	bl	8000fc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RESET_PULLDOWN_GPIO_Port, RESET_PULLDOWN_Pin, GPIO_PIN_SET);
 8000342:	2201      	movs	r2, #1
 8000344:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034c:	f000 fe3a 	bl	8000fc4 <HAL_GPIO_WritePin>
			break;
 8000350:	e002      	b.n	8000358 <main+0x118>

		default:
			send_UNKNOWN();
 8000352:	f7ff ff63 	bl	800021c <send_UNKNOWN>
			break;
 8000356:	bf00      	nop
	  if (HAL_UART_Receive(&huart2, receive_buffer, 1, SERIAL_TIMEOUT) == HAL_OK) {
 8000358:	e791      	b.n	800027e <main+0x3e>
 800035a:	bf00      	nop
 800035c:	20000028 	.word	0x20000028
 8000360:	200000c8 	.word	0x200000c8
 8000364:	2000003c 	.word	0x2000003c
 8000368:	48000400 	.word	0x48000400

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b0a6      	sub	sp, #152	; 0x98
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000376:	2228      	movs	r2, #40	; 0x28
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f003 f86d 	bl	800345a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000380:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
 800038a:	609a      	str	r2, [r3, #8]
 800038c:	60da      	str	r2, [r3, #12]
 800038e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2258      	movs	r2, #88	; 0x58
 8000394:	2100      	movs	r1, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f003 f85f 	bl	800345a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800039c:	2302      	movs	r3, #2
 800039e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a0:	2301      	movs	r3, #1
 80003a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a4:	2310      	movs	r3, #16
 80003a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003aa:	2302      	movs	r3, #2
 80003ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 fe12 	bl	8000ff4 <HAL_RCC_OscConfig>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003d6:	f000 f90d 	bl	80005f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003da:	230f      	movs	r3, #15
 80003dc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003de:	2302      	movs	r3, #2
 80003e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003f4:	2102      	movs	r1, #2
 80003f6:	4618      	mov	r0, r3
 80003f8:	f001 fe50 	bl	800209c <HAL_RCC_ClockConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000402:	f000 f8f7 	bl	80005f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000406:	2302      	movs	r3, #2
 8000408:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800040a:	2300      	movs	r3, #0
 800040c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	4618      	mov	r0, r3
 8000412:	f002 f879 	bl	8002508 <HAL_RCCEx_PeriphCLKConfig>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800041c:	f000 f8ea 	bl	80005f4 <Error_Handler>
  }
}
 8000420:	bf00      	nop
 8000422:	3798      	adds	r7, #152	; 0x98
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000438:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_DAC1_Init+0x4c>)
 800043a:	4a0f      	ldr	r2, [pc, #60]	; (8000478 <MX_DAC1_Init+0x50>)
 800043c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800043e:	480d      	ldr	r0, [pc, #52]	; (8000474 <MX_DAC1_Init+0x4c>)
 8000440:	f000 fb57 	bl	8000af2 <HAL_DAC_Init>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 800044a:	f000 f8d3 	bl	80005f4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800044e:	2300      	movs	r3, #0
 8000450:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000452:	2300      	movs	r3, #0
 8000454:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2200      	movs	r2, #0
 800045a:	4619      	mov	r1, r3
 800045c:	4805      	ldr	r0, [pc, #20]	; (8000474 <MX_DAC1_Init+0x4c>)
 800045e:	f000 fbda 	bl	8000c16 <HAL_DAC_ConfigChannel>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000468:	f000 f8c4 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800046c:	bf00      	nop
 800046e:	3710      	adds	r7, #16
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000028 	.word	0x20000028
 8000478:	40007400 	.word	0x40007400

0800047c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000480:	4b14      	ldr	r3, [pc, #80]	; (80004d4 <MX_USART2_UART_Init+0x58>)
 8000482:	4a15      	ldr	r2, [pc, #84]	; (80004d8 <MX_USART2_UART_Init+0x5c>)
 8000484:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000486:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <MX_USART2_UART_Init+0x58>)
 8000488:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800048c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800048e:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <MX_USART2_UART_Init+0x58>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <MX_USART2_UART_Init+0x58>)
 8000496:	2200      	movs	r2, #0
 8000498:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800049a:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <MX_USART2_UART_Init+0x58>)
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004a0:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <MX_USART2_UART_Init+0x58>)
 80004a2:	220c      	movs	r2, #12
 80004a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <MX_USART2_UART_Init+0x58>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ac:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <MX_USART2_UART_Init+0x58>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004b2:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <MX_USART2_UART_Init+0x58>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <MX_USART2_UART_Init+0x58>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004be:	4805      	ldr	r0, [pc, #20]	; (80004d4 <MX_USART2_UART_Init+0x58>)
 80004c0:	f002 fa40 	bl	8002944 <HAL_UART_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004ca:	f000 f893 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	2000003c 	.word	0x2000003c
 80004d8:	40004400 	.word	0x40004400

080004dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08a      	sub	sp, #40	; 0x28
 80004e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 0314 	add.w	r3, r7, #20
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	4b3d      	ldr	r3, [pc, #244]	; (80005e8 <MX_GPIO_Init+0x10c>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	4a3c      	ldr	r2, [pc, #240]	; (80005e8 <MX_GPIO_Init+0x10c>)
 80004f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004fc:	6153      	str	r3, [r2, #20]
 80004fe:	4b3a      	ldr	r3, [pc, #232]	; (80005e8 <MX_GPIO_Init+0x10c>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000506:	613b      	str	r3, [r7, #16]
 8000508:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800050a:	4b37      	ldr	r3, [pc, #220]	; (80005e8 <MX_GPIO_Init+0x10c>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a36      	ldr	r2, [pc, #216]	; (80005e8 <MX_GPIO_Init+0x10c>)
 8000510:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000514:	6153      	str	r3, [r2, #20]
 8000516:	4b34      	ldr	r3, [pc, #208]	; (80005e8 <MX_GPIO_Init+0x10c>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	4b31      	ldr	r3, [pc, #196]	; (80005e8 <MX_GPIO_Init+0x10c>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	4a30      	ldr	r2, [pc, #192]	; (80005e8 <MX_GPIO_Init+0x10c>)
 8000528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052c:	6153      	str	r3, [r2, #20]
 800052e:	4b2e      	ldr	r3, [pc, #184]	; (80005e8 <MX_GPIO_Init+0x10c>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	4b2b      	ldr	r3, [pc, #172]	; (80005e8 <MX_GPIO_Init+0x10c>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a2a      	ldr	r2, [pc, #168]	; (80005e8 <MX_GPIO_Init+0x10c>)
 8000540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <MX_GPIO_Init+0x10c>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RESET_PULLDOWN_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055c:	f000 fd32 	bl	8000fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SET_GPIO_Port, SET_Pin, GPIO_PIN_SET);
 8000560:	2201      	movs	r2, #1
 8000562:	2120      	movs	r1, #32
 8000564:	4821      	ldr	r0, [pc, #132]	; (80005ec <MX_GPIO_Init+0x110>)
 8000566:	f000 fd2d 	bl	8000fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800056a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800056e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000570:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4619      	mov	r1, r3
 8000580:	481b      	ldr	r0, [pc, #108]	; (80005f0 <MX_GPIO_Init+0x114>)
 8000582:	f000 fb95 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000586:	2320      	movs	r3, #32
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	2301      	movs	r3, #1
 800058c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	2300      	movs	r3, #0
 8000594:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4619      	mov	r1, r3
 800059c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a0:	f000 fb86 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_PULLDOWN_Pin */
  GPIO_InitStruct.Pin = RESET_PULLDOWN_Pin;
 80005a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005aa:	2311      	movs	r3, #17
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	2300      	movs	r3, #0
 80005b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_PULLDOWN_GPIO_Port, &GPIO_InitStruct);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c0:	f000 fb76 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SET_Pin */
  GPIO_InitStruct.Pin = SET_Pin;
 80005c4:	2320      	movs	r3, #32
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	2300      	movs	r3, #0
 80005d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SET_GPIO_Port, &GPIO_InitStruct);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4619      	mov	r1, r3
 80005da:	4804      	ldr	r0, [pc, #16]	; (80005ec <MX_GPIO_Init+0x110>)
 80005dc:	f000 fb68 	bl	8000cb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005e0:	bf00      	nop
 80005e2:	3728      	adds	r7, #40	; 0x28
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000
 80005ec:	48000400 	.word	0x48000400
 80005f0:	48000800 	.word	0x48000800

080005f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f8:	b672      	cpsid	i
}
 80005fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005fc:	e7fe      	b.n	80005fc <Error_Handler+0x8>
	...

08000600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <HAL_MspInit+0x44>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <HAL_MspInit+0x44>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6193      	str	r3, [r2, #24]
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <HAL_MspInit+0x44>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <HAL_MspInit+0x44>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	4a08      	ldr	r2, [pc, #32]	; (8000644 <HAL_MspInit+0x44>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000628:	61d3      	str	r3, [r2, #28]
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_MspInit+0x44>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000636:	2007      	movs	r0, #7
 8000638:	f000 fa28 	bl	8000a8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021000 	.word	0x40021000

08000648 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a15      	ldr	r2, [pc, #84]	; (80006bc <HAL_DAC_MspInit+0x74>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d124      	bne.n	80006b4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <HAL_DAC_MspInit+0x78>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4a14      	ldr	r2, [pc, #80]	; (80006c0 <HAL_DAC_MspInit+0x78>)
 8000670:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000674:	61d3      	str	r3, [r2, #28]
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <HAL_DAC_MspInit+0x78>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <HAL_DAC_MspInit+0x78>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <HAL_DAC_MspInit+0x78>)
 8000688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068c:	6153      	str	r3, [r2, #20]
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <HAL_DAC_MspInit+0x78>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800069a:	2310      	movs	r3, #16
 800069c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069e:	2303      	movs	r3, #3
 80006a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b0:	f000 fafe 	bl	8000cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80006b4:	bf00      	nop
 80006b6:	3728      	adds	r7, #40	; 0x28
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40007400 	.word	0x40007400
 80006c0:	40021000 	.word	0x40021000

080006c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a17      	ldr	r2, [pc, #92]	; (8000740 <HAL_UART_MspInit+0x7c>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d128      	bne.n	8000738 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <HAL_UART_MspInit+0x80>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	4a16      	ldr	r2, [pc, #88]	; (8000744 <HAL_UART_MspInit+0x80>)
 80006ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f0:	61d3      	str	r3, [r2, #28]
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <HAL_UART_MspInit+0x80>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <HAL_UART_MspInit+0x80>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	4a10      	ldr	r2, [pc, #64]	; (8000744 <HAL_UART_MspInit+0x80>)
 8000704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000708:	6153      	str	r3, [r2, #20]
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <HAL_UART_MspInit+0x80>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000716:	230c      	movs	r3, #12
 8000718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071a:	2302      	movs	r3, #2
 800071c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000726:	2307      	movs	r3, #7
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000734:	f000 fabc 	bl	8000cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000738:	bf00      	nop
 800073a:	3728      	adds	r7, #40	; 0x28
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40004400 	.word	0x40004400
 8000744:	40021000 	.word	0x40021000

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800074c:	e7fe      	b.n	800074c <NMI_Handler+0x4>

0800074e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <HardFault_Handler+0x4>

08000754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <MemManage_Handler+0x4>

0800075a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <BusFault_Handler+0x4>

08000760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <UsageFault_Handler+0x4>

08000766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000794:	f000 f884 	bl	80008a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}

0800079c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <SystemInit+0x20>)
 80007a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007a6:	4a05      	ldr	r2, [pc, #20]	; (80007bc <SystemInit+0x20>)
 80007a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007f8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007c4:	f7ff ffea 	bl	800079c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c8:	480c      	ldr	r0, [pc, #48]	; (80007fc <LoopForever+0x6>)
  ldr r1, =_edata
 80007ca:	490d      	ldr	r1, [pc, #52]	; (8000800 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007cc:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <LoopForever+0xe>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d0:	e002      	b.n	80007d8 <LoopCopyDataInit>

080007d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d6:	3304      	adds	r3, #4

080007d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007dc:	d3f9      	bcc.n	80007d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007e0:	4c0a      	ldr	r4, [pc, #40]	; (800080c <LoopForever+0x16>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e4:	e001      	b.n	80007ea <LoopFillZerobss>

080007e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e8:	3204      	adds	r2, #4

080007ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ec:	d3fb      	bcc.n	80007e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ee:	f002 fe3d 	bl	800346c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007f2:	f7ff fd25 	bl	8000240 <main>

080007f6 <LoopForever>:

LoopForever:
    b LoopForever
 80007f6:	e7fe      	b.n	80007f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000800:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000804:	0800350c 	.word	0x0800350c
  ldr r2, =_sbss
 8000808:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800080c:	200000d0 	.word	0x200000d0

08000810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC1_2_IRQHandler>
	...

08000814 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <HAL_Init+0x28>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a07      	ldr	r2, [pc, #28]	; (800083c <HAL_Init+0x28>)
 800081e:	f043 0310 	orr.w	r3, r3, #16
 8000822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000824:	2003      	movs	r0, #3
 8000826:	f000 f931 	bl	8000a8c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800082a:	2000      	movs	r0, #0
 800082c:	f000 f808 	bl	8000840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000830:	f7ff fee6 	bl	8000600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40022000 	.word	0x40022000

08000840 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_InitTick+0x54>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_InitTick+0x58>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000856:	fbb3 f3f1 	udiv	r3, r3, r1
 800085a:	fbb2 f3f3 	udiv	r3, r2, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f93b 	bl	8000ada <HAL_SYSTICK_Config>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	e00e      	b.n	800088c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b0f      	cmp	r3, #15
 8000872:	d80a      	bhi.n	800088a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000874:	2200      	movs	r2, #0
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	f04f 30ff 	mov.w	r0, #4294967295
 800087c:	f000 f911 	bl	8000aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000880:	4a06      	ldr	r2, [pc, #24]	; (800089c <HAL_InitTick+0x5c>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000886:	2300      	movs	r3, #0
 8000888:	e000      	b.n	800088c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000000 	.word	0x20000000
 8000898:	20000008 	.word	0x20000008
 800089c:	20000004 	.word	0x20000004

080008a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_IncTick+0x20>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_IncTick+0x24>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4413      	add	r3, r2
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <HAL_IncTick+0x24>)
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000008 	.word	0x20000008
 80008c4:	200000cc 	.word	0x200000cc

080008c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <HAL_GetTick+0x14>)
 80008ce:	681b      	ldr	r3, [r3, #0]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	200000cc 	.word	0x200000cc

080008e0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e8:	f7ff ffee 	bl	80008c8 <HAL_GetTick>
 80008ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f8:	d005      	beq.n	8000906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <HAL_Delay+0x44>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	461a      	mov	r2, r3
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4413      	add	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000906:	bf00      	nop
 8000908:	f7ff ffde 	bl	80008c8 <HAL_GetTick>
 800090c:	4602      	mov	r2, r0
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	429a      	cmp	r2, r3
 8000916:	d8f7      	bhi.n	8000908 <HAL_Delay+0x28>
  {
  }
}
 8000918:	bf00      	nop
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000008 	.word	0x20000008

08000928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <__NVIC_SetPriorityGrouping+0x44>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000944:	4013      	ands	r3, r2
 8000946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095a:	4a04      	ldr	r2, [pc, #16]	; (800096c <__NVIC_SetPriorityGrouping+0x44>)
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	60d3      	str	r3, [r2, #12]
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <__NVIC_GetPriorityGrouping+0x18>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	0a1b      	lsrs	r3, r3, #8
 800097a:	f003 0307 	and.w	r3, r3, #7
}
 800097e:	4618      	mov	r0, r3
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	6039      	str	r1, [r7, #0]
 8000996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	db0a      	blt.n	80009b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	490c      	ldr	r1, [pc, #48]	; (80009d8 <__NVIC_SetPriority+0x4c>)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	0112      	lsls	r2, r2, #4
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	440b      	add	r3, r1
 80009b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b4:	e00a      	b.n	80009cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4908      	ldr	r1, [pc, #32]	; (80009dc <__NVIC_SetPriority+0x50>)
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	f003 030f 	and.w	r3, r3, #15
 80009c2:	3b04      	subs	r3, #4
 80009c4:	0112      	lsls	r2, r2, #4
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	440b      	add	r3, r1
 80009ca:	761a      	strb	r2, [r3, #24]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000e100 	.word	0xe000e100
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b089      	sub	sp, #36	; 0x24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	f1c3 0307 	rsb	r3, r3, #7
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	bf28      	it	cs
 80009fe:	2304      	movcs	r3, #4
 8000a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3304      	adds	r3, #4
 8000a06:	2b06      	cmp	r3, #6
 8000a08:	d902      	bls.n	8000a10 <NVIC_EncodePriority+0x30>
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3b03      	subs	r3, #3
 8000a0e:	e000      	b.n	8000a12 <NVIC_EncodePriority+0x32>
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	f04f 32ff 	mov.w	r2, #4294967295
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43da      	mvns	r2, r3
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	401a      	ands	r2, r3
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a28:	f04f 31ff 	mov.w	r1, #4294967295
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a32:	43d9      	mvns	r1, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	4313      	orrs	r3, r2
         );
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3724      	adds	r7, #36	; 0x24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a58:	d301      	bcc.n	8000a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00f      	b.n	8000a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <SysTick_Config+0x40>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a66:	210f      	movs	r1, #15
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f7ff ff8e 	bl	800098c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SysTick_Config+0x40>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <SysTick_Config+0x40>)
 8000a78:	2207      	movs	r2, #7
 8000a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	e000e010 	.word	0xe000e010

08000a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff ff47 	bl	8000928 <__NVIC_SetPriorityGrouping>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
 8000aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab4:	f7ff ff5c 	bl	8000970 <__NVIC_GetPriorityGrouping>
 8000ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	6978      	ldr	r0, [r7, #20]
 8000ac0:	f7ff ff8e 	bl	80009e0 <NVIC_EncodePriority>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff5d 	bl	800098c <__NVIC_SetPriority>
}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ffb0 	bl	8000a48 <SysTick_Config>
 8000ae8:	4603      	mov	r3, r0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d101      	bne.n	8000b04 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000b00:	2301      	movs	r3, #1
 8000b02:	e014      	b.n	8000b2e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	791b      	ldrb	r3, [r3, #4]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d105      	bne.n	8000b1a <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff fd97 	bl	8000648 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2201      	movs	r2, #1
 8000b2a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8000b36:	b480      	push	{r7}
 8000b38:	b087      	sub	sp, #28
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d105      	bne.n	8000b60 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	3308      	adds	r3, #8
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	e004      	b.n	8000b6a <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	3314      	adds	r3, #20
 8000b68:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	371c      	adds	r7, #28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	795b      	ldrb	r3, [r3, #5]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d101      	bne.n	8000b96 <HAL_DAC_Start+0x16>
 8000b92:	2302      	movs	r3, #2
 8000b94:	e039      	b.n	8000c0a <HAL_DAC_Start+0x8a>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2201      	movs	r2, #1
 8000b9a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	6819      	ldr	r1, [r3, #0]
 8000ba8:	2201      	movs	r2, #1
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	409a      	lsls	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d10f      	bne.n	8000bdc <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8000bc6:	2b3c      	cmp	r3, #60	; 0x3c
 8000bc8:	d118      	bne.n	8000bfc <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	685a      	ldr	r2, [r3, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f042 0201 	orr.w	r2, r2, #1
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	e00f      	b.n	8000bfc <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000be6:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8000bea:	d107      	bne.n	8000bfc <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f042 0202 	orr.w	r2, r2, #2
 8000bfa:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b087      	sub	sp, #28
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	60f8      	str	r0, [r7, #12]
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	795b      	ldrb	r3, [r3, #5]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d101      	bne.n	8000c36 <HAL_DAC_ConfigChannel+0x20>
 8000c32:	2302      	movs	r3, #2
 8000c34:	e036      	b.n	8000ca4 <HAL_DAC_ConfigChannel+0x8e>
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2201      	movs	r2, #1
 8000c3a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2202      	movs	r2, #2
 8000c40:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000c4a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6819      	ldr	r1, [r3, #0]
 8000c84:	22c0      	movs	r2, #192	; 0xc0
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43da      	mvns	r2, r3
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	400a      	ands	r2, r1
 8000c94:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2201      	movs	r2, #1
 8000c9a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	371c      	adds	r7, #28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b087      	sub	sp, #28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cbe:	e160      	b.n	8000f82 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f000 8152 	beq.w	8000f7c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 0303 	and.w	r3, r3, #3
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d005      	beq.n	8000cf0 <HAL_GPIO_Init+0x40>
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d130      	bne.n	8000d52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	68da      	ldr	r2, [r3, #12]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d26:	2201      	movs	r2, #1
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	091b      	lsrs	r3, r3, #4
 8000d3c:	f003 0201 	and.w	r2, r3, #1
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d017      	beq.n	8000d8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	2203      	movs	r2, #3
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d123      	bne.n	8000de2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	08da      	lsrs	r2, r3, #3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3208      	adds	r2, #8
 8000da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	220f      	movs	r2, #15
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	691a      	ldr	r2, [r3, #16]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	08da      	lsrs	r2, r3, #3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3208      	adds	r2, #8
 8000ddc:	6939      	ldr	r1, [r7, #16]
 8000dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2203      	movs	r2, #3
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0203 	and.w	r2, r3, #3
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 80ac 	beq.w	8000f7c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e24:	4b5e      	ldr	r3, [pc, #376]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a5d      	ldr	r2, [pc, #372]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b5b      	ldr	r3, [pc, #364]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e3c:	4a59      	ldr	r2, [pc, #356]	; (8000fa4 <HAL_GPIO_Init+0x2f4>)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	089b      	lsrs	r3, r3, #2
 8000e42:	3302      	adds	r3, #2
 8000e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	220f      	movs	r2, #15
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e66:	d025      	beq.n	8000eb4 <HAL_GPIO_Init+0x204>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a4f      	ldr	r2, [pc, #316]	; (8000fa8 <HAL_GPIO_Init+0x2f8>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d01f      	beq.n	8000eb0 <HAL_GPIO_Init+0x200>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a4e      	ldr	r2, [pc, #312]	; (8000fac <HAL_GPIO_Init+0x2fc>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d019      	beq.n	8000eac <HAL_GPIO_Init+0x1fc>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a4d      	ldr	r2, [pc, #308]	; (8000fb0 <HAL_GPIO_Init+0x300>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d013      	beq.n	8000ea8 <HAL_GPIO_Init+0x1f8>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a4c      	ldr	r2, [pc, #304]	; (8000fb4 <HAL_GPIO_Init+0x304>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d00d      	beq.n	8000ea4 <HAL_GPIO_Init+0x1f4>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a4b      	ldr	r2, [pc, #300]	; (8000fb8 <HAL_GPIO_Init+0x308>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d007      	beq.n	8000ea0 <HAL_GPIO_Init+0x1f0>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a4a      	ldr	r2, [pc, #296]	; (8000fbc <HAL_GPIO_Init+0x30c>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d101      	bne.n	8000e9c <HAL_GPIO_Init+0x1ec>
 8000e98:	2306      	movs	r3, #6
 8000e9a:	e00c      	b.n	8000eb6 <HAL_GPIO_Init+0x206>
 8000e9c:	2307      	movs	r3, #7
 8000e9e:	e00a      	b.n	8000eb6 <HAL_GPIO_Init+0x206>
 8000ea0:	2305      	movs	r3, #5
 8000ea2:	e008      	b.n	8000eb6 <HAL_GPIO_Init+0x206>
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	e006      	b.n	8000eb6 <HAL_GPIO_Init+0x206>
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e004      	b.n	8000eb6 <HAL_GPIO_Init+0x206>
 8000eac:	2302      	movs	r3, #2
 8000eae:	e002      	b.n	8000eb6 <HAL_GPIO_Init+0x206>
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e000      	b.n	8000eb6 <HAL_GPIO_Init+0x206>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	f002 0203 	and.w	r2, r2, #3
 8000ebc:	0092      	lsls	r2, r2, #2
 8000ebe:	4093      	lsls	r3, r2
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ec6:	4937      	ldr	r1, [pc, #220]	; (8000fa4 <HAL_GPIO_Init+0x2f4>)
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3302      	adds	r3, #2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ed4:	4b3a      	ldr	r3, [pc, #232]	; (8000fc0 <HAL_GPIO_Init+0x310>)
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ef8:	4a31      	ldr	r2, [pc, #196]	; (8000fc0 <HAL_GPIO_Init+0x310>)
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000efe:	4b30      	ldr	r3, [pc, #192]	; (8000fc0 <HAL_GPIO_Init+0x310>)
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f22:	4a27      	ldr	r2, [pc, #156]	; (8000fc0 <HAL_GPIO_Init+0x310>)
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f28:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <HAL_GPIO_Init+0x310>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f4c:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <HAL_GPIO_Init+0x310>)
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f52:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <HAL_GPIO_Init+0x310>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <HAL_GPIO_Init+0x310>)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	fa22 f303 	lsr.w	r3, r2, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f47f ae97 	bne.w	8000cc0 <HAL_GPIO_Init+0x10>
  }
}
 8000f92:	bf00      	nop
 8000f94:	bf00      	nop
 8000f96:	371c      	adds	r7, #28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40010000 	.word	0x40010000
 8000fa8:	48000400 	.word	0x48000400
 8000fac:	48000800 	.word	0x48000800
 8000fb0:	48000c00 	.word	0x48000c00
 8000fb4:	48001000 	.word	0x48001000
 8000fb8:	48001400 	.word	0x48001400
 8000fbc:	48001800 	.word	0x48001800
 8000fc0:	40010400 	.word	0x40010400

08000fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fd4:	787b      	ldrb	r3, [r7, #1]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fda:	887a      	ldrh	r2, [r7, #2]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fe0:	e002      	b.n	8000fe8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fe2:	887a      	ldrh	r2, [r7, #2]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001000:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001004:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001006:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800100a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	f001 b83a 	b.w	800208e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800101e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 816f 	beq.w	800130e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001030:	4bb5      	ldr	r3, [pc, #724]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 030c 	and.w	r3, r3, #12
 8001038:	2b04      	cmp	r3, #4
 800103a:	d00c      	beq.n	8001056 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800103c:	4bb2      	ldr	r3, [pc, #712]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 030c 	and.w	r3, r3, #12
 8001044:	2b08      	cmp	r3, #8
 8001046:	d15c      	bne.n	8001102 <HAL_RCC_OscConfig+0x10e>
 8001048:	4baf      	ldr	r3, [pc, #700]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001054:	d155      	bne.n	8001102 <HAL_RCC_OscConfig+0x10e>
 8001056:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800105a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001062:	fa93 f3a3 	rbit	r3, r3
 8001066:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800106a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106e:	fab3 f383 	clz	r3, r3
 8001072:	b2db      	uxtb	r3, r3
 8001074:	095b      	lsrs	r3, r3, #5
 8001076:	b2db      	uxtb	r3, r3
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d102      	bne.n	8001088 <HAL_RCC_OscConfig+0x94>
 8001082:	4ba1      	ldr	r3, [pc, #644]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	e015      	b.n	80010b4 <HAL_RCC_OscConfig+0xc0>
 8001088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800108c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001090:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001094:	fa93 f3a3 	rbit	r3, r3
 8001098:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800109c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80010a4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80010a8:	fa93 f3a3 	rbit	r3, r3
 80010ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80010b0:	4b95      	ldr	r3, [pc, #596]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 80010b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010b8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80010bc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80010c0:	fa92 f2a2 	rbit	r2, r2
 80010c4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80010c8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80010cc:	fab2 f282 	clz	r2, r2
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	f042 0220 	orr.w	r2, r2, #32
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	f002 021f 	and.w	r2, r2, #31
 80010dc:	2101      	movs	r1, #1
 80010de:	fa01 f202 	lsl.w	r2, r1, r2
 80010e2:	4013      	ands	r3, r2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 8111 	beq.w	800130c <HAL_RCC_OscConfig+0x318>
 80010ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f040 8108 	bne.w	800130c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	f000 bfc6 	b.w	800208e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001102:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001106:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001112:	d106      	bne.n	8001122 <HAL_RCC_OscConfig+0x12e>
 8001114:	4b7c      	ldr	r3, [pc, #496]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a7b      	ldr	r2, [pc, #492]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 800111a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	e036      	b.n	8001190 <HAL_RCC_OscConfig+0x19c>
 8001122:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001126:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10c      	bne.n	800114c <HAL_RCC_OscConfig+0x158>
 8001132:	4b75      	ldr	r3, [pc, #468]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a74      	ldr	r2, [pc, #464]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 8001138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	4b72      	ldr	r3, [pc, #456]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a71      	ldr	r2, [pc, #452]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 8001144:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e021      	b.n	8001190 <HAL_RCC_OscConfig+0x19c>
 800114c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001150:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800115c:	d10c      	bne.n	8001178 <HAL_RCC_OscConfig+0x184>
 800115e:	4b6a      	ldr	r3, [pc, #424]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a69      	ldr	r2, [pc, #420]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 8001164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	4b67      	ldr	r3, [pc, #412]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a66      	ldr	r2, [pc, #408]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 8001170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e00b      	b.n	8001190 <HAL_RCC_OscConfig+0x19c>
 8001178:	4b63      	ldr	r3, [pc, #396]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a62      	ldr	r2, [pc, #392]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 800117e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b60      	ldr	r3, [pc, #384]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a5f      	ldr	r2, [pc, #380]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 800118a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001190:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001194:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d059      	beq.n	8001254 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fb92 	bl	80008c8 <HAL_GetTick>
 80011a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a8:	e00a      	b.n	80011c0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011aa:	f7ff fb8d 	bl	80008c8 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	; 0x64
 80011b8:	d902      	bls.n	80011c0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	f000 bf67 	b.w	800208e <HAL_RCC_OscConfig+0x109a>
 80011c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011c4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80011cc:	fa93 f3a3 	rbit	r3, r3
 80011d0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80011d4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d8:	fab3 f383 	clz	r3, r3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	095b      	lsrs	r3, r3, #5
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d102      	bne.n	80011f2 <HAL_RCC_OscConfig+0x1fe>
 80011ec:	4b46      	ldr	r3, [pc, #280]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	e015      	b.n	800121e <HAL_RCC_OscConfig+0x22a>
 80011f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80011fe:	fa93 f3a3 	rbit	r3, r3
 8001202:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001206:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800120a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800120e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001212:	fa93 f3a3 	rbit	r3, r3
 8001216:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800121a:	4b3b      	ldr	r3, [pc, #236]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001222:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001226:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800122a:	fa92 f2a2 	rbit	r2, r2
 800122e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001232:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001236:	fab2 f282 	clz	r2, r2
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	f042 0220 	orr.w	r2, r2, #32
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	f002 021f 	and.w	r2, r2, #31
 8001246:	2101      	movs	r1, #1
 8001248:	fa01 f202 	lsl.w	r2, r1, r2
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0ab      	beq.n	80011aa <HAL_RCC_OscConfig+0x1b6>
 8001252:	e05c      	b.n	800130e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001254:	f7ff fb38 	bl	80008c8 <HAL_GetTick>
 8001258:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125c:	e00a      	b.n	8001274 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800125e:	f7ff fb33 	bl	80008c8 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b64      	cmp	r3, #100	; 0x64
 800126c:	d902      	bls.n	8001274 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	f000 bf0d 	b.w	800208e <HAL_RCC_OscConfig+0x109a>
 8001274:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001278:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001280:	fa93 f3a3 	rbit	r3, r3
 8001284:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001288:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128c:	fab3 f383 	clz	r3, r3
 8001290:	b2db      	uxtb	r3, r3
 8001292:	095b      	lsrs	r3, r3, #5
 8001294:	b2db      	uxtb	r3, r3
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b01      	cmp	r3, #1
 800129e:	d102      	bne.n	80012a6 <HAL_RCC_OscConfig+0x2b2>
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	e015      	b.n	80012d2 <HAL_RCC_OscConfig+0x2de>
 80012a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80012b2:	fa93 f3a3 	rbit	r3, r3
 80012b6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80012ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012be:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80012c2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <HAL_RCC_OscConfig+0x314>)
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012d6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80012da:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80012de:	fa92 f2a2 	rbit	r2, r2
 80012e2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80012e6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80012ea:	fab2 f282 	clz	r2, r2
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	f042 0220 	orr.w	r2, r2, #32
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	f002 021f 	and.w	r2, r2, #31
 80012fa:	2101      	movs	r1, #1
 80012fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001300:	4013      	ands	r3, r2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1ab      	bne.n	800125e <HAL_RCC_OscConfig+0x26a>
 8001306:	e002      	b.n	800130e <HAL_RCC_OscConfig+0x31a>
 8001308:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001312:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 817f 	beq.w	8001622 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001324:	4ba7      	ldr	r3, [pc, #668]	; (80015c4 <HAL_RCC_OscConfig+0x5d0>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00c      	beq.n	800134a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001330:	4ba4      	ldr	r3, [pc, #656]	; (80015c4 <HAL_RCC_OscConfig+0x5d0>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 030c 	and.w	r3, r3, #12
 8001338:	2b08      	cmp	r3, #8
 800133a:	d173      	bne.n	8001424 <HAL_RCC_OscConfig+0x430>
 800133c:	4ba1      	ldr	r3, [pc, #644]	; (80015c4 <HAL_RCC_OscConfig+0x5d0>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001348:	d16c      	bne.n	8001424 <HAL_RCC_OscConfig+0x430>
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001350:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001354:	fa93 f3a3 	rbit	r3, r3
 8001358:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800135c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001360:	fab3 f383 	clz	r3, r3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	095b      	lsrs	r3, r3, #5
 8001368:	b2db      	uxtb	r3, r3
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b01      	cmp	r3, #1
 8001372:	d102      	bne.n	800137a <HAL_RCC_OscConfig+0x386>
 8001374:	4b93      	ldr	r3, [pc, #588]	; (80015c4 <HAL_RCC_OscConfig+0x5d0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	e013      	b.n	80013a2 <HAL_RCC_OscConfig+0x3ae>
 800137a:	2302      	movs	r3, #2
 800137c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001380:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001384:	fa93 f3a3 	rbit	r3, r3
 8001388:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800138c:	2302      	movs	r3, #2
 800138e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001392:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001396:	fa93 f3a3 	rbit	r3, r3
 800139a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800139e:	4b89      	ldr	r3, [pc, #548]	; (80015c4 <HAL_RCC_OscConfig+0x5d0>)
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	2202      	movs	r2, #2
 80013a4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80013a8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80013ac:	fa92 f2a2 	rbit	r2, r2
 80013b0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80013b4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80013b8:	fab2 f282 	clz	r2, r2
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	f042 0220 	orr.w	r2, r2, #32
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	f002 021f 	and.w	r2, r2, #31
 80013c8:	2101      	movs	r1, #1
 80013ca:	fa01 f202 	lsl.w	r2, r1, r2
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00a      	beq.n	80013ea <HAL_RCC_OscConfig+0x3f6>
 80013d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d002      	beq.n	80013ea <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	f000 be52 	b.w	800208e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ea:	4b76      	ldr	r3, [pc, #472]	; (80015c4 <HAL_RCC_OscConfig+0x5d0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	21f8      	movs	r1, #248	; 0xf8
 8001400:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001404:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001408:	fa91 f1a1 	rbit	r1, r1
 800140c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001410:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001414:	fab1 f181 	clz	r1, r1
 8001418:	b2c9      	uxtb	r1, r1
 800141a:	408b      	lsls	r3, r1
 800141c:	4969      	ldr	r1, [pc, #420]	; (80015c4 <HAL_RCC_OscConfig+0x5d0>)
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001422:	e0fe      	b.n	8001622 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001424:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001428:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 8088 	beq.w	8001546 <HAL_RCC_OscConfig+0x552>
 8001436:	2301      	movs	r3, #1
 8001438:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001440:	fa93 f3a3 	rbit	r3, r3
 8001444:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001448:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800144c:	fab3 f383 	clz	r3, r3
 8001450:	b2db      	uxtb	r3, r3
 8001452:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001456:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	461a      	mov	r2, r3
 800145e:	2301      	movs	r3, #1
 8001460:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001462:	f7ff fa31 	bl	80008c8 <HAL_GetTick>
 8001466:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146a:	e00a      	b.n	8001482 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800146c:	f7ff fa2c 	bl	80008c8 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d902      	bls.n	8001482 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	f000 be06 	b.w	800208e <HAL_RCC_OscConfig+0x109a>
 8001482:	2302      	movs	r3, #2
 8001484:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001488:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800148c:	fa93 f3a3 	rbit	r3, r3
 8001490:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001494:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001498:	fab3 f383 	clz	r3, r3
 800149c:	b2db      	uxtb	r3, r3
 800149e:	095b      	lsrs	r3, r3, #5
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d102      	bne.n	80014b2 <HAL_RCC_OscConfig+0x4be>
 80014ac:	4b45      	ldr	r3, [pc, #276]	; (80015c4 <HAL_RCC_OscConfig+0x5d0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	e013      	b.n	80014da <HAL_RCC_OscConfig+0x4e6>
 80014b2:	2302      	movs	r3, #2
 80014b4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80014bc:	fa93 f3a3 	rbit	r3, r3
 80014c0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80014c4:	2302      	movs	r3, #2
 80014c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80014ca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80014ce:	fa93 f3a3 	rbit	r3, r3
 80014d2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80014d6:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <HAL_RCC_OscConfig+0x5d0>)
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	2202      	movs	r2, #2
 80014dc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80014e0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80014e4:	fa92 f2a2 	rbit	r2, r2
 80014e8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80014ec:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80014f0:	fab2 f282 	clz	r2, r2
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	f042 0220 	orr.w	r2, r2, #32
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	f002 021f 	and.w	r2, r2, #31
 8001500:	2101      	movs	r1, #1
 8001502:	fa01 f202 	lsl.w	r2, r1, r2
 8001506:	4013      	ands	r3, r2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0af      	beq.n	800146c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150c:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <HAL_RCC_OscConfig+0x5d0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001514:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001518:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	21f8      	movs	r1, #248	; 0xf8
 8001522:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001526:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800152a:	fa91 f1a1 	rbit	r1, r1
 800152e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001532:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001536:	fab1 f181 	clz	r1, r1
 800153a:	b2c9      	uxtb	r1, r1
 800153c:	408b      	lsls	r3, r1
 800153e:	4921      	ldr	r1, [pc, #132]	; (80015c4 <HAL_RCC_OscConfig+0x5d0>)
 8001540:	4313      	orrs	r3, r2
 8001542:	600b      	str	r3, [r1, #0]
 8001544:	e06d      	b.n	8001622 <HAL_RCC_OscConfig+0x62e>
 8001546:	2301      	movs	r3, #1
 8001548:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001550:	fa93 f3a3 	rbit	r3, r3
 8001554:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001558:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800155c:	fab3 f383 	clz	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001566:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	461a      	mov	r2, r3
 800156e:	2300      	movs	r3, #0
 8001570:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001572:	f7ff f9a9 	bl	80008c8 <HAL_GetTick>
 8001576:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157a:	e00a      	b.n	8001592 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800157c:	f7ff f9a4 	bl	80008c8 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d902      	bls.n	8001592 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	f000 bd7e 	b.w	800208e <HAL_RCC_OscConfig+0x109a>
 8001592:	2302      	movs	r3, #2
 8001594:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80015a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a8:	fab3 f383 	clz	r3, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	095b      	lsrs	r3, r3, #5
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d105      	bne.n	80015c8 <HAL_RCC_OscConfig+0x5d4>
 80015bc:	4b01      	ldr	r3, [pc, #4]	; (80015c4 <HAL_RCC_OscConfig+0x5d0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	e016      	b.n	80015f0 <HAL_RCC_OscConfig+0x5fc>
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	2302      	movs	r3, #2
 80015ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015d2:	fa93 f3a3 	rbit	r3, r3
 80015d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80015da:	2302      	movs	r3, #2
 80015dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80015e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015e4:	fa93 f3a3 	rbit	r3, r3
 80015e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015ec:	4bbf      	ldr	r3, [pc, #764]	; (80018ec <HAL_RCC_OscConfig+0x8f8>)
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	2202      	movs	r2, #2
 80015f2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80015f6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80015fa:	fa92 f2a2 	rbit	r2, r2
 80015fe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001602:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001606:	fab2 f282 	clz	r2, r2
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	f042 0220 	orr.w	r2, r2, #32
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	f002 021f 	and.w	r2, r2, #31
 8001616:	2101      	movs	r1, #1
 8001618:	fa01 f202 	lsl.w	r2, r1, r2
 800161c:	4013      	ands	r3, r2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1ac      	bne.n	800157c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001622:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001626:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 8113 	beq.w	800185e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001638:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800163c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d07c      	beq.n	8001742 <HAL_RCC_OscConfig+0x74e>
 8001648:	2301      	movs	r3, #1
 800164a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001652:	fa93 f3a3 	rbit	r3, r3
 8001656:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800165a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800165e:	fab3 f383 	clz	r3, r3
 8001662:	b2db      	uxtb	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	4ba2      	ldr	r3, [pc, #648]	; (80018f0 <HAL_RCC_OscConfig+0x8fc>)
 8001668:	4413      	add	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	461a      	mov	r2, r3
 800166e:	2301      	movs	r3, #1
 8001670:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001672:	f7ff f929 	bl	80008c8 <HAL_GetTick>
 8001676:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167a:	e00a      	b.n	8001692 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800167c:	f7ff f924 	bl	80008c8 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d902      	bls.n	8001692 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	f000 bcfe 	b.w	800208e <HAL_RCC_OscConfig+0x109a>
 8001692:	2302      	movs	r3, #2
 8001694:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001698:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800169c:	fa93 f2a3 	rbit	r2, r3
 80016a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016b2:	2202      	movs	r2, #2
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	fa93 f2a3 	rbit	r2, r3
 80016c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016d6:	2202      	movs	r2, #2
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	fa93 f2a3 	rbit	r2, r3
 80016e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f2:	4b7e      	ldr	r3, [pc, #504]	; (80018ec <HAL_RCC_OscConfig+0x8f8>)
 80016f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016fe:	2102      	movs	r1, #2
 8001700:	6019      	str	r1, [r3, #0]
 8001702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001706:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	fa93 f1a3 	rbit	r1, r3
 8001710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001714:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001718:	6019      	str	r1, [r3, #0]
  return result;
 800171a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800171e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800172e:	b2db      	uxtb	r3, r3
 8001730:	f003 031f 	and.w	r3, r3, #31
 8001734:	2101      	movs	r1, #1
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	4013      	ands	r3, r2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d09d      	beq.n	800167c <HAL_RCC_OscConfig+0x688>
 8001740:	e08d      	b.n	800185e <HAL_RCC_OscConfig+0x86a>
 8001742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001746:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001752:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	fa93 f2a3 	rbit	r2, r3
 800175c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001760:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001764:	601a      	str	r2, [r3, #0]
  return result;
 8001766:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800176a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800176e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001770:	fab3 f383 	clz	r3, r3
 8001774:	b2db      	uxtb	r3, r3
 8001776:	461a      	mov	r2, r3
 8001778:	4b5d      	ldr	r3, [pc, #372]	; (80018f0 <HAL_RCC_OscConfig+0x8fc>)
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	461a      	mov	r2, r3
 8001780:	2300      	movs	r3, #0
 8001782:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001784:	f7ff f8a0 	bl	80008c8 <HAL_GetTick>
 8001788:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800178c:	e00a      	b.n	80017a4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800178e:	f7ff f89b 	bl	80008c8 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d902      	bls.n	80017a4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	f000 bc75 	b.w	800208e <HAL_RCC_OscConfig+0x109a>
 80017a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017ac:	2202      	movs	r2, #2
 80017ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	fa93 f2a3 	rbit	r2, r3
 80017be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017d0:	2202      	movs	r2, #2
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	fa93 f2a3 	rbit	r2, r3
 80017e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80017f4:	2202      	movs	r2, #2
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017fc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	fa93 f2a3 	rbit	r2, r3
 8001806:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800180a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800180e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001810:	4b36      	ldr	r3, [pc, #216]	; (80018ec <HAL_RCC_OscConfig+0x8f8>)
 8001812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001814:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001818:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800181c:	2102      	movs	r1, #2
 800181e:	6019      	str	r1, [r3, #0]
 8001820:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001824:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	fa93 f1a3 	rbit	r1, r3
 800182e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001832:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001836:	6019      	str	r1, [r3, #0]
  return result;
 8001838:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800183c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	fab3 f383 	clz	r3, r3
 8001846:	b2db      	uxtb	r3, r3
 8001848:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800184c:	b2db      	uxtb	r3, r3
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	2101      	movs	r1, #1
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d197      	bne.n	800178e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800185e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001862:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 81a5 	beq.w	8001bbe <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <HAL_RCC_OscConfig+0x8f8>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d116      	bne.n	80018b4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	4b19      	ldr	r3, [pc, #100]	; (80018ec <HAL_RCC_OscConfig+0x8f8>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	4a18      	ldr	r2, [pc, #96]	; (80018ec <HAL_RCC_OscConfig+0x8f8>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001890:	61d3      	str	r3, [r2, #28]
 8001892:	4b16      	ldr	r3, [pc, #88]	; (80018ec <HAL_RCC_OscConfig+0x8f8>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800189a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800189e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ac:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80018ae:	2301      	movs	r3, #1
 80018b0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <HAL_RCC_OscConfig+0x900>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d121      	bne.n	8001904 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <HAL_RCC_OscConfig+0x900>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <HAL_RCC_OscConfig+0x900>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ca:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018cc:	f7fe fffc 	bl	80008c8 <HAL_GetTick>
 80018d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d4:	e010      	b.n	80018f8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d6:	f7fe fff7 	bl	80008c8 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	; 0x64
 80018e4:	d908      	bls.n	80018f8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e3d1      	b.n	800208e <HAL_RCC_OscConfig+0x109a>
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000
 80018f0:	10908120 	.word	0x10908120
 80018f4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f8:	4b8d      	ldr	r3, [pc, #564]	; (8001b30 <HAL_RCC_OscConfig+0xb3c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0e8      	beq.n	80018d6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001904:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001908:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d106      	bne.n	8001922 <HAL_RCC_OscConfig+0x92e>
 8001914:	4b87      	ldr	r3, [pc, #540]	; (8001b34 <HAL_RCC_OscConfig+0xb40>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	4a86      	ldr	r2, [pc, #536]	; (8001b34 <HAL_RCC_OscConfig+0xb40>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6213      	str	r3, [r2, #32]
 8001920:	e035      	b.n	800198e <HAL_RCC_OscConfig+0x99a>
 8001922:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001926:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0x958>
 8001932:	4b80      	ldr	r3, [pc, #512]	; (8001b34 <HAL_RCC_OscConfig+0xb40>)
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	4a7f      	ldr	r2, [pc, #508]	; (8001b34 <HAL_RCC_OscConfig+0xb40>)
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	6213      	str	r3, [r2, #32]
 800193e:	4b7d      	ldr	r3, [pc, #500]	; (8001b34 <HAL_RCC_OscConfig+0xb40>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4a7c      	ldr	r2, [pc, #496]	; (8001b34 <HAL_RCC_OscConfig+0xb40>)
 8001944:	f023 0304 	bic.w	r3, r3, #4
 8001948:	6213      	str	r3, [r2, #32]
 800194a:	e020      	b.n	800198e <HAL_RCC_OscConfig+0x99a>
 800194c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001950:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b05      	cmp	r3, #5
 800195a:	d10c      	bne.n	8001976 <HAL_RCC_OscConfig+0x982>
 800195c:	4b75      	ldr	r3, [pc, #468]	; (8001b34 <HAL_RCC_OscConfig+0xb40>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	4a74      	ldr	r2, [pc, #464]	; (8001b34 <HAL_RCC_OscConfig+0xb40>)
 8001962:	f043 0304 	orr.w	r3, r3, #4
 8001966:	6213      	str	r3, [r2, #32]
 8001968:	4b72      	ldr	r3, [pc, #456]	; (8001b34 <HAL_RCC_OscConfig+0xb40>)
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	4a71      	ldr	r2, [pc, #452]	; (8001b34 <HAL_RCC_OscConfig+0xb40>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6213      	str	r3, [r2, #32]
 8001974:	e00b      	b.n	800198e <HAL_RCC_OscConfig+0x99a>
 8001976:	4b6f      	ldr	r3, [pc, #444]	; (8001b34 <HAL_RCC_OscConfig+0xb40>)
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	4a6e      	ldr	r2, [pc, #440]	; (8001b34 <HAL_RCC_OscConfig+0xb40>)
 800197c:	f023 0301 	bic.w	r3, r3, #1
 8001980:	6213      	str	r3, [r2, #32]
 8001982:	4b6c      	ldr	r3, [pc, #432]	; (8001b34 <HAL_RCC_OscConfig+0xb40>)
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	4a6b      	ldr	r2, [pc, #428]	; (8001b34 <HAL_RCC_OscConfig+0xb40>)
 8001988:	f023 0304 	bic.w	r3, r3, #4
 800198c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800198e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001992:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 8081 	beq.w	8001aa2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a0:	f7fe ff92 	bl	80008c8 <HAL_GetTick>
 80019a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a8:	e00b      	b.n	80019c2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019aa:	f7fe ff8d 	bl	80008c8 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e365      	b.n	800208e <HAL_RCC_OscConfig+0x109a>
 80019c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80019ca:	2202      	movs	r2, #2
 80019cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	fa93 f2a3 	rbit	r2, r3
 80019dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019ee:	2202      	movs	r2, #2
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	fa93 f2a3 	rbit	r2, r3
 8001a00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a04:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a08:	601a      	str	r2, [r3, #0]
  return result;
 8001a0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a12:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a14:	fab3 f383 	clz	r3, r3
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	f043 0302 	orr.w	r3, r3, #2
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d102      	bne.n	8001a2e <HAL_RCC_OscConfig+0xa3a>
 8001a28:	4b42      	ldr	r3, [pc, #264]	; (8001b34 <HAL_RCC_OscConfig+0xb40>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	e013      	b.n	8001a56 <HAL_RCC_OscConfig+0xa62>
 8001a2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a32:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a36:	2202      	movs	r2, #2
 8001a38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	fa93 f2a3 	rbit	r2, r3
 8001a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	4b38      	ldr	r3, [pc, #224]	; (8001b34 <HAL_RCC_OscConfig+0xb40>)
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a5a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a5e:	2102      	movs	r1, #2
 8001a60:	6011      	str	r1, [r2, #0]
 8001a62:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a66:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	fa92 f1a2 	rbit	r1, r2
 8001a70:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a74:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001a78:	6011      	str	r1, [r2, #0]
  return result;
 8001a7a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a7e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	fab2 f282 	clz	r2, r2
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	f002 021f 	and.w	r2, r2, #31
 8001a94:	2101      	movs	r1, #1
 8001a96:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d084      	beq.n	80019aa <HAL_RCC_OscConfig+0x9b6>
 8001aa0:	e083      	b.n	8001baa <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa2:	f7fe ff11 	bl	80008c8 <HAL_GetTick>
 8001aa6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aaa:	e00b      	b.n	8001ac4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aac:	f7fe ff0c 	bl	80008c8 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e2e4      	b.n	800208e <HAL_RCC_OscConfig+0x109a>
 8001ac4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001acc:	2202      	movs	r2, #2
 8001ace:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	fa93 f2a3 	rbit	r2, r3
 8001ade:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aec:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001af0:	2202      	movs	r2, #2
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	fa93 f2a3 	rbit	r2, r3
 8001b02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b06:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b0a:	601a      	str	r2, [r3, #0]
  return result;
 8001b0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b10:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b14:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b16:	fab3 f383 	clz	r3, r3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	095b      	lsrs	r3, r3, #5
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d106      	bne.n	8001b38 <HAL_RCC_OscConfig+0xb44>
 8001b2a:	4b02      	ldr	r3, [pc, #8]	; (8001b34 <HAL_RCC_OscConfig+0xb40>)
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	e017      	b.n	8001b60 <HAL_RCC_OscConfig+0xb6c>
 8001b30:	40007000 	.word	0x40007000
 8001b34:	40021000 	.word	0x40021000
 8001b38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b40:	2202      	movs	r2, #2
 8001b42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b48:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	fa93 f2a3 	rbit	r2, r3
 8001b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b56:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	4bb3      	ldr	r3, [pc, #716]	; (8001e2c <HAL_RCC_OscConfig+0xe38>)
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b64:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b68:	2102      	movs	r1, #2
 8001b6a:	6011      	str	r1, [r2, #0]
 8001b6c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b70:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	fa92 f1a2 	rbit	r1, r2
 8001b7a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b7e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001b82:	6011      	str	r1, [r2, #0]
  return result;
 8001b84:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b88:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	fab2 f282 	clz	r2, r2
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	f002 021f 	and.w	r2, r2, #31
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d180      	bne.n	8001aac <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001baa:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d105      	bne.n	8001bbe <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb2:	4b9e      	ldr	r3, [pc, #632]	; (8001e2c <HAL_RCC_OscConfig+0xe38>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	4a9d      	ldr	r2, [pc, #628]	; (8001e2c <HAL_RCC_OscConfig+0xe38>)
 8001bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 825e 	beq.w	800208c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd0:	4b96      	ldr	r3, [pc, #600]	; (8001e2c <HAL_RCC_OscConfig+0xe38>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 030c 	and.w	r3, r3, #12
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	f000 821f 	beq.w	800201c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	f040 8170 	bne.w	8001ed0 <HAL_RCC_OscConfig+0xedc>
 8001bf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001bf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c02:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	fa93 f2a3 	rbit	r2, r3
 8001c0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c10:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c14:	601a      	str	r2, [r3, #0]
  return result;
 8001c16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c1a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c1e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c20:	fab3 f383 	clz	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	461a      	mov	r2, r3
 8001c32:	2300      	movs	r3, #0
 8001c34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c36:	f7fe fe47 	bl	80008c8 <HAL_GetTick>
 8001c3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3e:	e009      	b.n	8001c54 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c40:	f7fe fe42 	bl	80008c8 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e21c      	b.n	800208e <HAL_RCC_OscConfig+0x109a>
 8001c54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c58:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c66:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	fa93 f2a3 	rbit	r2, r3
 8001c70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c74:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c78:	601a      	str	r2, [r3, #0]
  return result;
 8001c7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c84:	fab3 f383 	clz	r3, r3
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	095b      	lsrs	r3, r3, #5
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d102      	bne.n	8001c9e <HAL_RCC_OscConfig+0xcaa>
 8001c98:	4b64      	ldr	r3, [pc, #400]	; (8001e2c <HAL_RCC_OscConfig+0xe38>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	e027      	b.n	8001cee <HAL_RCC_OscConfig+0xcfa>
 8001c9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ca6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001caa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	fa93 f2a3 	rbit	r2, r3
 8001cba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cbe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ccc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	fa93 f2a3 	rbit	r2, r3
 8001ce0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	4b50      	ldr	r3, [pc, #320]	; (8001e2c <HAL_RCC_OscConfig+0xe38>)
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cf2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001cf6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cfa:	6011      	str	r1, [r2, #0]
 8001cfc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d00:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	fa92 f1a2 	rbit	r1, r2
 8001d0a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d0e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001d12:	6011      	str	r1, [r2, #0]
  return result;
 8001d14:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d18:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	fab2 f282 	clz	r2, r2
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	f042 0220 	orr.w	r2, r2, #32
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	f002 021f 	and.w	r2, r2, #31
 8001d2e:	2101      	movs	r1, #1
 8001d30:	fa01 f202 	lsl.w	r2, r1, r2
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d182      	bne.n	8001c40 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d3a:	4b3c      	ldr	r3, [pc, #240]	; (8001e2c <HAL_RCC_OscConfig+0xe38>)
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	f023 020f 	bic.w	r2, r3, #15
 8001d42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	4937      	ldr	r1, [pc, #220]	; (8001e2c <HAL_RCC_OscConfig+0xe38>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001d54:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <HAL_RCC_OscConfig+0xe38>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001d5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6a19      	ldr	r1, [r3, #32]
 8001d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	430b      	orrs	r3, r1
 8001d76:	492d      	ldr	r1, [pc, #180]	; (8001e2c <HAL_RCC_OscConfig+0xe38>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
 8001d7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d80:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	fa93 f2a3 	rbit	r2, r3
 8001d98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001da0:	601a      	str	r2, [r3, #0]
  return result;
 8001da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001daa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dac:	fab3 f383 	clz	r3, r3
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001db6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc2:	f7fe fd81 	bl	80008c8 <HAL_GetTick>
 8001dc6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dca:	e009      	b.n	8001de0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dcc:	f7fe fd7c 	bl	80008c8 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e156      	b.n	800208e <HAL_RCC_OscConfig+0x109a>
 8001de0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001de8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	fa93 f2a3 	rbit	r2, r3
 8001dfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e00:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e04:	601a      	str	r2, [r3, #0]
  return result;
 8001e06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e0e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e10:	fab3 f383 	clz	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d105      	bne.n	8001e30 <HAL_RCC_OscConfig+0xe3c>
 8001e24:	4b01      	ldr	r3, [pc, #4]	; (8001e2c <HAL_RCC_OscConfig+0xe38>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	e02a      	b.n	8001e80 <HAL_RCC_OscConfig+0xe8c>
 8001e2a:	bf00      	nop
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e34:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e42:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fa93 f2a3 	rbit	r2, r3
 8001e4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e50:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e68:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	fa93 f2a3 	rbit	r2, r3
 8001e72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e76:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	4b86      	ldr	r3, [pc, #536]	; (8002098 <HAL_RCC_OscConfig+0x10a4>)
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e84:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e8c:	6011      	str	r1, [r2, #0]
 8001e8e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e92:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	fa92 f1a2 	rbit	r1, r2
 8001e9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ea0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001ea4:	6011      	str	r1, [r2, #0]
  return result;
 8001ea6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eaa:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	fab2 f282 	clz	r2, r2
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	f042 0220 	orr.w	r2, r2, #32
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	f002 021f 	and.w	r2, r2, #31
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f43f af7f 	beq.w	8001dcc <HAL_RCC_OscConfig+0xdd8>
 8001ece:	e0dd      	b.n	800208c <HAL_RCC_OscConfig+0x1098>
 8001ed0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ed8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	fa93 f2a3 	rbit	r2, r3
 8001eec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ef4:	601a      	str	r2, [r3, #0]
  return result;
 8001ef6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001efa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001efe:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f00:	fab3 f383 	clz	r3, r3
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f0a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	461a      	mov	r2, r3
 8001f12:	2300      	movs	r3, #0
 8001f14:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f16:	f7fe fcd7 	bl	80008c8 <HAL_GetTick>
 8001f1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1e:	e009      	b.n	8001f34 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f20:	f7fe fcd2 	bl	80008c8 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e0ac      	b.n	800208e <HAL_RCC_OscConfig+0x109a>
 8001f34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f38:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f46:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	fa93 f2a3 	rbit	r2, r3
 8001f50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f54:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f58:	601a      	str	r2, [r3, #0]
  return result;
 8001f5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f64:	fab3 f383 	clz	r3, r3
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d102      	bne.n	8001f7e <HAL_RCC_OscConfig+0xf8a>
 8001f78:	4b47      	ldr	r3, [pc, #284]	; (8002098 <HAL_RCC_OscConfig+0x10a4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	e027      	b.n	8001fce <HAL_RCC_OscConfig+0xfda>
 8001f7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f82:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001f86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f90:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	fa93 f2a3 	rbit	r2, r3
 8001f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001fac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	fa93 f2a3 	rbit	r2, r3
 8001fc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	4b33      	ldr	r3, [pc, #204]	; (8002098 <HAL_RCC_OscConfig+0x10a4>)
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fd2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001fd6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fda:	6011      	str	r1, [r2, #0]
 8001fdc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fe0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	fa92 f1a2 	rbit	r1, r2
 8001fea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fee:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001ff2:	6011      	str	r1, [r2, #0]
  return result;
 8001ff4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ff8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	fab2 f282 	clz	r2, r2
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	f042 0220 	orr.w	r2, r2, #32
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	f002 021f 	and.w	r2, r2, #31
 800200e:	2101      	movs	r1, #1
 8002010:	fa01 f202 	lsl.w	r2, r1, r2
 8002014:	4013      	ands	r3, r2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d182      	bne.n	8001f20 <HAL_RCC_OscConfig+0xf2c>
 800201a:	e037      	b.n	800208c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800201c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002020:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e02e      	b.n	800208e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002030:	4b19      	ldr	r3, [pc, #100]	; (8002098 <HAL_RCC_OscConfig+0x10a4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002038:	4b17      	ldr	r3, [pc, #92]	; (8002098 <HAL_RCC_OscConfig+0x10a4>)
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002040:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002044:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002048:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	429a      	cmp	r2, r3
 8002056:	d117      	bne.n	8002088 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002058:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800205c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002060:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002064:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800206c:	429a      	cmp	r2, r3
 800206e:	d10b      	bne.n	8002088 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002070:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002074:	f003 020f 	and.w	r2, r3, #15
 8002078:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800207c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021000 	.word	0x40021000

0800209c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b09e      	sub	sp, #120	; 0x78
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e162      	b.n	800237a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020b4:	4b90      	ldr	r3, [pc, #576]	; (80022f8 <HAL_RCC_ClockConfig+0x25c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d910      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b8d      	ldr	r3, [pc, #564]	; (80022f8 <HAL_RCC_ClockConfig+0x25c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 0207 	bic.w	r2, r3, #7
 80020ca:	498b      	ldr	r1, [pc, #556]	; (80022f8 <HAL_RCC_ClockConfig+0x25c>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b89      	ldr	r3, [pc, #548]	; (80022f8 <HAL_RCC_ClockConfig+0x25c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e14a      	b.n	800237a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f0:	4b82      	ldr	r3, [pc, #520]	; (80022fc <HAL_RCC_ClockConfig+0x260>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	497f      	ldr	r1, [pc, #508]	; (80022fc <HAL_RCC_ClockConfig+0x260>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 80dc 	beq.w	80022c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d13c      	bne.n	8002192 <HAL_RCC_ClockConfig+0xf6>
 8002118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800211c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002128:	fab3 f383 	clz	r3, r3
 800212c:	b2db      	uxtb	r3, r3
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b01      	cmp	r3, #1
 800213a:	d102      	bne.n	8002142 <HAL_RCC_ClockConfig+0xa6>
 800213c:	4b6f      	ldr	r3, [pc, #444]	; (80022fc <HAL_RCC_ClockConfig+0x260>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	e00f      	b.n	8002162 <HAL_RCC_ClockConfig+0xc6>
 8002142:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002146:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	667b      	str	r3, [r7, #100]	; 0x64
 8002150:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002154:	663b      	str	r3, [r7, #96]	; 0x60
 8002156:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002158:	fa93 f3a3 	rbit	r3, r3
 800215c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800215e:	4b67      	ldr	r3, [pc, #412]	; (80022fc <HAL_RCC_ClockConfig+0x260>)
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002166:	65ba      	str	r2, [r7, #88]	; 0x58
 8002168:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800216a:	fa92 f2a2 	rbit	r2, r2
 800216e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002170:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002172:	fab2 f282 	clz	r2, r2
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	f042 0220 	orr.w	r2, r2, #32
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	f002 021f 	and.w	r2, r2, #31
 8002182:	2101      	movs	r1, #1
 8002184:	fa01 f202 	lsl.w	r2, r1, r2
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d17b      	bne.n	8002286 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e0f3      	b.n	800237a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d13c      	bne.n	8002214 <HAL_RCC_ClockConfig+0x178>
 800219a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800219e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	095b      	lsrs	r3, r3, #5
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d102      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x128>
 80021be:	4b4f      	ldr	r3, [pc, #316]	; (80022fc <HAL_RCC_ClockConfig+0x260>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	e00f      	b.n	80021e4 <HAL_RCC_ClockConfig+0x148>
 80021c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021cc:	fa93 f3a3 	rbit	r3, r3
 80021d0:	647b      	str	r3, [r7, #68]	; 0x44
 80021d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021d6:	643b      	str	r3, [r7, #64]	; 0x40
 80021d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021e0:	4b46      	ldr	r3, [pc, #280]	; (80022fc <HAL_RCC_ClockConfig+0x260>)
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80021ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021ec:	fa92 f2a2 	rbit	r2, r2
 80021f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80021f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021f4:	fab2 f282 	clz	r2, r2
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	f042 0220 	orr.w	r2, r2, #32
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	f002 021f 	and.w	r2, r2, #31
 8002204:	2101      	movs	r1, #1
 8002206:	fa01 f202 	lsl.w	r2, r1, r2
 800220a:	4013      	ands	r3, r2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d13a      	bne.n	8002286 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0b2      	b.n	800237a <HAL_RCC_ClockConfig+0x2de>
 8002214:	2302      	movs	r3, #2
 8002216:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	095b      	lsrs	r3, r3, #5
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d102      	bne.n	800223c <HAL_RCC_ClockConfig+0x1a0>
 8002236:	4b31      	ldr	r3, [pc, #196]	; (80022fc <HAL_RCC_ClockConfig+0x260>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	e00d      	b.n	8002258 <HAL_RCC_ClockConfig+0x1bc>
 800223c:	2302      	movs	r3, #2
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002242:	fa93 f3a3 	rbit	r3, r3
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
 8002248:	2302      	movs	r3, #2
 800224a:	623b      	str	r3, [r7, #32]
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	61fb      	str	r3, [r7, #28]
 8002254:	4b29      	ldr	r3, [pc, #164]	; (80022fc <HAL_RCC_ClockConfig+0x260>)
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	2202      	movs	r2, #2
 800225a:	61ba      	str	r2, [r7, #24]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	fa92 f2a2 	rbit	r2, r2
 8002262:	617a      	str	r2, [r7, #20]
  return result;
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	fab2 f282 	clz	r2, r2
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	f042 0220 	orr.w	r2, r2, #32
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	f002 021f 	and.w	r2, r2, #31
 8002276:	2101      	movs	r1, #1
 8002278:	fa01 f202 	lsl.w	r2, r1, r2
 800227c:	4013      	ands	r3, r2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e079      	b.n	800237a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002286:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <HAL_RCC_ClockConfig+0x260>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f023 0203 	bic.w	r2, r3, #3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	491a      	ldr	r1, [pc, #104]	; (80022fc <HAL_RCC_ClockConfig+0x260>)
 8002294:	4313      	orrs	r3, r2
 8002296:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002298:	f7fe fb16 	bl	80008c8 <HAL_GetTick>
 800229c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229e:	e00a      	b.n	80022b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a0:	f7fe fb12 	bl	80008c8 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e061      	b.n	800237a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <HAL_RCC_ClockConfig+0x260>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 020c 	and.w	r2, r3, #12
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d1eb      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_RCC_ClockConfig+0x25c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d214      	bcs.n	8002300 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <HAL_RCC_ClockConfig+0x25c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 0207 	bic.w	r2, r3, #7
 80022de:	4906      	ldr	r1, [pc, #24]	; (80022f8 <HAL_RCC_ClockConfig+0x25c>)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <HAL_RCC_ClockConfig+0x25c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d005      	beq.n	8002300 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e040      	b.n	800237a <HAL_RCC_ClockConfig+0x2de>
 80022f8:	40022000 	.word	0x40022000
 80022fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800230c:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <HAL_RCC_ClockConfig+0x2e8>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	491a      	ldr	r1, [pc, #104]	; (8002384 <HAL_RCC_ClockConfig+0x2e8>)
 800231a:	4313      	orrs	r3, r2
 800231c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d009      	beq.n	800233e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800232a:	4b16      	ldr	r3, [pc, #88]	; (8002384 <HAL_RCC_ClockConfig+0x2e8>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4912      	ldr	r1, [pc, #72]	; (8002384 <HAL_RCC_ClockConfig+0x2e8>)
 800233a:	4313      	orrs	r3, r2
 800233c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800233e:	f000 f829 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 8002342:	4601      	mov	r1, r0
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <HAL_RCC_ClockConfig+0x2e8>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800234c:	22f0      	movs	r2, #240	; 0xf0
 800234e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	fa92 f2a2 	rbit	r2, r2
 8002356:	60fa      	str	r2, [r7, #12]
  return result;
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	fab2 f282 	clz	r2, r2
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	40d3      	lsrs	r3, r2
 8002362:	4a09      	ldr	r2, [pc, #36]	; (8002388 <HAL_RCC_ClockConfig+0x2ec>)
 8002364:	5cd3      	ldrb	r3, [r2, r3]
 8002366:	fa21 f303 	lsr.w	r3, r1, r3
 800236a:	4a08      	ldr	r2, [pc, #32]	; (800238c <HAL_RCC_ClockConfig+0x2f0>)
 800236c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <HAL_RCC_ClockConfig+0x2f4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe fa64 	bl	8000840 <HAL_InitTick>
  
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3778      	adds	r7, #120	; 0x78
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000
 8002388:	080034cc 	.word	0x080034cc
 800238c:	20000000 	.word	0x20000000
 8002390:	20000004 	.word	0x20000004

08002394 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002394:	b480      	push	{r7}
 8002396:	b08b      	sub	sp, #44	; 0x2c
 8002398:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	2300      	movs	r3, #0
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80023ae:	4b2a      	ldr	r3, [pc, #168]	; (8002458 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d002      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0x30>
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d003      	beq.n	80023ca <HAL_RCC_GetSysClockFreq+0x36>
 80023c2:	e03f      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023c4:	4b25      	ldr	r3, [pc, #148]	; (800245c <HAL_RCC_GetSysClockFreq+0xc8>)
 80023c6:	623b      	str	r3, [r7, #32]
      break;
 80023c8:	e03f      	b.n	800244a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80023d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	fa92 f2a2 	rbit	r2, r2
 80023dc:	607a      	str	r2, [r7, #4]
  return result;
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	fab2 f282 	clz	r2, r2
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	40d3      	lsrs	r3, r2
 80023e8:	4a1d      	ldr	r2, [pc, #116]	; (8002460 <HAL_RCC_GetSysClockFreq+0xcc>)
 80023ea:	5cd3      	ldrb	r3, [r2, r3]
 80023ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80023ee:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	220f      	movs	r2, #15
 80023f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	fa92 f2a2 	rbit	r2, r2
 8002400:	60fa      	str	r2, [r7, #12]
  return result;
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	fab2 f282 	clz	r2, r2
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	40d3      	lsrs	r3, r2
 800240c:	4a15      	ldr	r2, [pc, #84]	; (8002464 <HAL_RCC_GetSysClockFreq+0xd0>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800241c:	4a0f      	ldr	r2, [pc, #60]	; (800245c <HAL_RCC_GetSysClockFreq+0xc8>)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	fbb2 f2f3 	udiv	r2, r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	fb02 f303 	mul.w	r3, r2, r3
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
 800242c:	e007      	b.n	800243e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800242e:	4a0b      	ldr	r2, [pc, #44]	; (800245c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	fbb2 f2f3 	udiv	r2, r2, r3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	fb02 f303 	mul.w	r3, r2, r3
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	623b      	str	r3, [r7, #32]
      break;
 8002442:	e002      	b.n	800244a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002446:	623b      	str	r3, [r7, #32]
      break;
 8002448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800244a:	6a3b      	ldr	r3, [r7, #32]
}
 800244c:	4618      	mov	r0, r3
 800244e:	372c      	adds	r7, #44	; 0x2c
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	40021000 	.word	0x40021000
 800245c:	007a1200 	.word	0x007a1200
 8002460:	080034e4 	.word	0x080034e4
 8002464:	080034f4 	.word	0x080034f4

08002468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <HAL_RCC_GetHCLKFreq+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000000 	.word	0x20000000

08002480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002486:	f7ff ffef 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 800248a:	4601      	mov	r1, r0
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002494:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002498:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	fa92 f2a2 	rbit	r2, r2
 80024a0:	603a      	str	r2, [r7, #0]
  return result;
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	fab2 f282 	clz	r2, r2
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	40d3      	lsrs	r3, r2
 80024ac:	4a04      	ldr	r2, [pc, #16]	; (80024c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80024ae:	5cd3      	ldrb	r3, [r2, r3]
 80024b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000
 80024c0:	080034dc 	.word	0x080034dc

080024c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80024ca:	f7ff ffcd 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 80024ce:	4601      	mov	r1, r0
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80024d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80024dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	fa92 f2a2 	rbit	r2, r2
 80024e4:	603a      	str	r2, [r7, #0]
  return result;
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	fab2 f282 	clz	r2, r2
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	40d3      	lsrs	r3, r2
 80024f0:	4a04      	ldr	r2, [pc, #16]	; (8002504 <HAL_RCC_GetPCLK2Freq+0x40>)
 80024f2:	5cd3      	ldrb	r3, [r2, r3]
 80024f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80024f8:	4618      	mov	r0, r3
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40021000 	.word	0x40021000
 8002504:	080034dc 	.word	0x080034dc

08002508 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b092      	sub	sp, #72	; 0x48
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002518:	2300      	movs	r3, #0
 800251a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 80d4 	beq.w	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800252c:	4b4e      	ldr	r3, [pc, #312]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10e      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002538:	4b4b      	ldr	r3, [pc, #300]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	4a4a      	ldr	r2, [pc, #296]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002542:	61d3      	str	r3, [r2, #28]
 8002544:	4b48      	ldr	r3, [pc, #288]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002550:	2301      	movs	r3, #1
 8002552:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002556:	4b45      	ldr	r3, [pc, #276]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d118      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002562:	4b42      	ldr	r3, [pc, #264]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a41      	ldr	r2, [pc, #260]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800256e:	f7fe f9ab 	bl	80008c8 <HAL_GetTick>
 8002572:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002574:	e008      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002576:	f7fe f9a7 	bl	80008c8 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b64      	cmp	r3, #100	; 0x64
 8002582:	d901      	bls.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e1d6      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002588:	4b38      	ldr	r3, [pc, #224]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002594:	4b34      	ldr	r3, [pc, #208]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800259c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800259e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 8084 	beq.w	80026ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d07c      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025b4:	4b2c      	ldr	r3, [pc, #176]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b26      	ldr	r3, [pc, #152]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	461a      	mov	r2, r3
 80025de:	2301      	movs	r3, #1
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ea:	fa93 f3a3 	rbit	r3, r3
 80025ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025fc:	4413      	add	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	461a      	mov	r2, r3
 8002602:	2300      	movs	r3, #0
 8002604:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002606:	4a18      	ldr	r2, [pc, #96]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800260a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800260c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d04b      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002616:	f7fe f957 	bl	80008c8 <HAL_GetTick>
 800261a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261c:	e00a      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7fe f953 	bl	80008c8 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	; 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e180      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002634:	2302      	movs	r3, #2
 8002636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
 8002640:	2302      	movs	r3, #2
 8002642:	623b      	str	r3, [r7, #32]
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	61fb      	str	r3, [r7, #28]
  return result;
 800264c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	095b      	lsrs	r3, r3, #5
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f043 0302 	orr.w	r3, r3, #2
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d108      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002662:	4b01      	ldr	r3, [pc, #4]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	e00d      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002668:	40021000 	.word	0x40021000
 800266c:	40007000 	.word	0x40007000
 8002670:	10908100 	.word	0x10908100
 8002674:	2302      	movs	r3, #2
 8002676:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	fa93 f3a3 	rbit	r3, r3
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	4b9a      	ldr	r3, [pc, #616]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	2202      	movs	r2, #2
 8002686:	613a      	str	r2, [r7, #16]
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	fa92 f2a2 	rbit	r2, r2
 800268e:	60fa      	str	r2, [r7, #12]
  return result;
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	fab2 f282 	clz	r2, r2
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	f002 021f 	and.w	r2, r2, #31
 80026a2:	2101      	movs	r1, #1
 80026a4:	fa01 f202 	lsl.w	r2, r1, r2
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0b7      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80026ae:	4b8f      	ldr	r3, [pc, #572]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	498c      	ldr	r1, [pc, #560]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d105      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c8:	4b88      	ldr	r3, [pc, #544]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	4a87      	ldr	r2, [pc, #540]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026e0:	4b82      	ldr	r3, [pc, #520]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	f023 0203 	bic.w	r2, r3, #3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	497f      	ldr	r1, [pc, #508]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d008      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026fe:	4b7b      	ldr	r3, [pc, #492]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	4978      	ldr	r1, [pc, #480]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800270c:	4313      	orrs	r3, r2
 800270e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800271c:	4b73      	ldr	r3, [pc, #460]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	4970      	ldr	r1, [pc, #448]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800272a:	4313      	orrs	r3, r2
 800272c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800273a:	4b6c      	ldr	r3, [pc, #432]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	f023 0210 	bic.w	r2, r3, #16
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	4969      	ldr	r1, [pc, #420]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002748:	4313      	orrs	r3, r2
 800274a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002758:	4b64      	ldr	r3, [pc, #400]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002764:	4961      	ldr	r1, [pc, #388]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002766:	4313      	orrs	r3, r2
 8002768:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002776:	4b5d      	ldr	r3, [pc, #372]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f023 0220 	bic.w	r2, r3, #32
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	495a      	ldr	r1, [pc, #360]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002784:	4313      	orrs	r3, r2
 8002786:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002794:	4b55      	ldr	r3, [pc, #340]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	4952      	ldr	r1, [pc, #328]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d008      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027b2:	4b4e      	ldr	r3, [pc, #312]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	494b      	ldr	r1, [pc, #300]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027d0:	4b46      	ldr	r3, [pc, #280]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	4943      	ldr	r1, [pc, #268]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d008      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027ee:	4b3f      	ldr	r3, [pc, #252]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	493c      	ldr	r1, [pc, #240]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800280c:	4b37      	ldr	r3, [pc, #220]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	4934      	ldr	r1, [pc, #208]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800281a:	4313      	orrs	r3, r2
 800281c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002826:	2b00      	cmp	r3, #0
 8002828:	d008      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800282a:	4b30      	ldr	r3, [pc, #192]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	492d      	ldr	r1, [pc, #180]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002838:	4313      	orrs	r3, r2
 800283a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002848:	4b28      	ldr	r3, [pc, #160]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002854:	4925      	ldr	r1, [pc, #148]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002856:	4313      	orrs	r3, r2
 8002858:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d008      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002866:	4b21      	ldr	r3, [pc, #132]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	491e      	ldr	r1, [pc, #120]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002874:	4313      	orrs	r3, r2
 8002876:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002884:	4b19      	ldr	r3, [pc, #100]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002890:	4916      	ldr	r1, [pc, #88]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d008      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80028a2:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ae:	490f      	ldr	r1, [pc, #60]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80028c0:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028cc:	4907      	ldr	r1, [pc, #28]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00c      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80028de:	4b03      	ldr	r3, [pc, #12]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	e002      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
 80028f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f2:	4913      	ldr	r1, [pc, #76]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002904:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002910:	490b      	ldr	r1, [pc, #44]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002912:	4313      	orrs	r3, r2
 8002914:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d008      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002922:	4b07      	ldr	r3, [pc, #28]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800292e:	4904      	ldr	r1, [pc, #16]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002930:	4313      	orrs	r3, r2
 8002932:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3748      	adds	r7, #72	; 0x48
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000

08002944 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e040      	b.n	80029d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800295a:	2b00      	cmp	r3, #0
 800295c:	d106      	bne.n	800296c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7fd feac 	bl	80006c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2224      	movs	r2, #36	; 0x24
 8002970:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0201 	bic.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f980 	bl	8002c88 <UART_SetConfig>
 8002988:	4603      	mov	r3, r0
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e022      	b.n	80029d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fb48 	bl	8003030 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 fbcf 	bl	8003174 <UART_CheckIdleState>
 80029d6:	4603      	mov	r3, r0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	4613      	mov	r3, r2
 80029ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	d178      	bne.n	8002aea <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d002      	beq.n	8002a04 <HAL_UART_Transmit+0x24>
 80029fe:	88fb      	ldrh	r3, [r7, #6]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e071      	b.n	8002aec <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2221      	movs	r2, #33	; 0x21
 8002a14:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a16:	f7fd ff57 	bl	80008c8 <HAL_GetTick>
 8002a1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	88fa      	ldrh	r2, [r7, #6]
 8002a20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	88fa      	ldrh	r2, [r7, #6]
 8002a28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a34:	d108      	bne.n	8002a48 <HAL_UART_Transmit+0x68>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d104      	bne.n	8002a48 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	61bb      	str	r3, [r7, #24]
 8002a46:	e003      	b.n	8002a50 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a50:	e030      	b.n	8002ab4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2180      	movs	r1, #128	; 0x80
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fc31 	bl	80032c4 <UART_WaitOnFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d004      	beq.n	8002a72 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e03c      	b.n	8002aec <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10b      	bne.n	8002a90 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	881a      	ldrh	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a84:	b292      	uxth	r2, r2
 8002a86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	e008      	b.n	8002aa2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	781a      	ldrb	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	b292      	uxth	r2, r2
 8002a9a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1c8      	bne.n	8002a52 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2140      	movs	r1, #64	; 0x40
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 fbfa 	bl	80032c4 <UART_WaitOnFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d004      	beq.n	8002ae0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e005      	b.n	8002aec <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e000      	b.n	8002aec <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002aea:	2302      	movs	r3, #2
  }
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3720      	adds	r7, #32
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	4613      	mov	r3, r2
 8002b02:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	f040 80b6 	bne.w	8002c7c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_UART_Receive+0x28>
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0ae      	b.n	8002c7e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2222      	movs	r2, #34	; 0x22
 8002b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b36:	f7fd fec7 	bl	80008c8 <HAL_GetTick>
 8002b3a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	88fa      	ldrh	r2, [r7, #6]
 8002b40:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	88fa      	ldrh	r2, [r7, #6]
 8002b48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b54:	d10e      	bne.n	8002b74 <HAL_UART_Receive+0x80>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d105      	bne.n	8002b6a <HAL_UART_Receive+0x76>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002b64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b68:	e02d      	b.n	8002bc6 <HAL_UART_Receive+0xd2>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	22ff      	movs	r2, #255	; 0xff
 8002b6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b72:	e028      	b.n	8002bc6 <HAL_UART_Receive+0xd2>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10d      	bne.n	8002b98 <HAL_UART_Receive+0xa4>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d104      	bne.n	8002b8e <HAL_UART_Receive+0x9a>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	22ff      	movs	r2, #255	; 0xff
 8002b88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b8c:	e01b      	b.n	8002bc6 <HAL_UART_Receive+0xd2>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	227f      	movs	r2, #127	; 0x7f
 8002b92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b96:	e016      	b.n	8002bc6 <HAL_UART_Receive+0xd2>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ba0:	d10d      	bne.n	8002bbe <HAL_UART_Receive+0xca>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d104      	bne.n	8002bb4 <HAL_UART_Receive+0xc0>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	227f      	movs	r2, #127	; 0x7f
 8002bae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bb2:	e008      	b.n	8002bc6 <HAL_UART_Receive+0xd2>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	223f      	movs	r2, #63	; 0x3f
 8002bb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bbc:	e003      	b.n	8002bc6 <HAL_UART_Receive+0xd2>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002bcc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd6:	d108      	bne.n	8002bea <HAL_UART_Receive+0xf6>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d104      	bne.n	8002bea <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	e003      	b.n	8002bf2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002bf2:	e037      	b.n	8002c64 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2120      	movs	r1, #32
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 fb60 	bl	80032c4 <UART_WaitOnFlagUntilTimeout>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e033      	b.n	8002c7e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10c      	bne.n	8002c36 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	8a7b      	ldrh	r3, [r7, #18]
 8002c26:	4013      	ands	r3, r2
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	3302      	adds	r3, #2
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	e00d      	b.n	8002c52 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	8a7b      	ldrh	r3, [r7, #18]
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	4013      	ands	r3, r2
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1c1      	bne.n	8002bf4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e000      	b.n	8002c7e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002c7c:	2302      	movs	r3, #2
  }
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3720      	adds	r7, #32
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	4b92      	ldr	r3, [pc, #584]	; (8002efc <UART_SetConfig+0x274>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	6979      	ldr	r1, [r7, #20]
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a80      	ldr	r2, [pc, #512]	; (8002f00 <UART_SetConfig+0x278>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d120      	bne.n	8002d46 <UART_SetConfig+0xbe>
 8002d04:	4b7f      	ldr	r3, [pc, #508]	; (8002f04 <UART_SetConfig+0x27c>)
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d817      	bhi.n	8002d40 <UART_SetConfig+0xb8>
 8002d10:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <UART_SetConfig+0x90>)
 8002d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d16:	bf00      	nop
 8002d18:	08002d29 	.word	0x08002d29
 8002d1c:	08002d35 	.word	0x08002d35
 8002d20:	08002d3b 	.word	0x08002d3b
 8002d24:	08002d2f 	.word	0x08002d2f
 8002d28:	2301      	movs	r3, #1
 8002d2a:	77fb      	strb	r3, [r7, #31]
 8002d2c:	e0b5      	b.n	8002e9a <UART_SetConfig+0x212>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	77fb      	strb	r3, [r7, #31]
 8002d32:	e0b2      	b.n	8002e9a <UART_SetConfig+0x212>
 8002d34:	2304      	movs	r3, #4
 8002d36:	77fb      	strb	r3, [r7, #31]
 8002d38:	e0af      	b.n	8002e9a <UART_SetConfig+0x212>
 8002d3a:	2308      	movs	r3, #8
 8002d3c:	77fb      	strb	r3, [r7, #31]
 8002d3e:	e0ac      	b.n	8002e9a <UART_SetConfig+0x212>
 8002d40:	2310      	movs	r3, #16
 8002d42:	77fb      	strb	r3, [r7, #31]
 8002d44:	e0a9      	b.n	8002e9a <UART_SetConfig+0x212>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a6f      	ldr	r2, [pc, #444]	; (8002f08 <UART_SetConfig+0x280>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d124      	bne.n	8002d9a <UART_SetConfig+0x112>
 8002d50:	4b6c      	ldr	r3, [pc, #432]	; (8002f04 <UART_SetConfig+0x27c>)
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d5c:	d011      	beq.n	8002d82 <UART_SetConfig+0xfa>
 8002d5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d62:	d817      	bhi.n	8002d94 <UART_SetConfig+0x10c>
 8002d64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d68:	d011      	beq.n	8002d8e <UART_SetConfig+0x106>
 8002d6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d6e:	d811      	bhi.n	8002d94 <UART_SetConfig+0x10c>
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <UART_SetConfig+0xf4>
 8002d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d78:	d006      	beq.n	8002d88 <UART_SetConfig+0x100>
 8002d7a:	e00b      	b.n	8002d94 <UART_SetConfig+0x10c>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	77fb      	strb	r3, [r7, #31]
 8002d80:	e08b      	b.n	8002e9a <UART_SetConfig+0x212>
 8002d82:	2302      	movs	r3, #2
 8002d84:	77fb      	strb	r3, [r7, #31]
 8002d86:	e088      	b.n	8002e9a <UART_SetConfig+0x212>
 8002d88:	2304      	movs	r3, #4
 8002d8a:	77fb      	strb	r3, [r7, #31]
 8002d8c:	e085      	b.n	8002e9a <UART_SetConfig+0x212>
 8002d8e:	2308      	movs	r3, #8
 8002d90:	77fb      	strb	r3, [r7, #31]
 8002d92:	e082      	b.n	8002e9a <UART_SetConfig+0x212>
 8002d94:	2310      	movs	r3, #16
 8002d96:	77fb      	strb	r3, [r7, #31]
 8002d98:	e07f      	b.n	8002e9a <UART_SetConfig+0x212>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a5b      	ldr	r2, [pc, #364]	; (8002f0c <UART_SetConfig+0x284>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d124      	bne.n	8002dee <UART_SetConfig+0x166>
 8002da4:	4b57      	ldr	r3, [pc, #348]	; (8002f04 <UART_SetConfig+0x27c>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002dac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002db0:	d011      	beq.n	8002dd6 <UART_SetConfig+0x14e>
 8002db2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002db6:	d817      	bhi.n	8002de8 <UART_SetConfig+0x160>
 8002db8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dbc:	d011      	beq.n	8002de2 <UART_SetConfig+0x15a>
 8002dbe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dc2:	d811      	bhi.n	8002de8 <UART_SetConfig+0x160>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <UART_SetConfig+0x148>
 8002dc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dcc:	d006      	beq.n	8002ddc <UART_SetConfig+0x154>
 8002dce:	e00b      	b.n	8002de8 <UART_SetConfig+0x160>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	77fb      	strb	r3, [r7, #31]
 8002dd4:	e061      	b.n	8002e9a <UART_SetConfig+0x212>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	77fb      	strb	r3, [r7, #31]
 8002dda:	e05e      	b.n	8002e9a <UART_SetConfig+0x212>
 8002ddc:	2304      	movs	r3, #4
 8002dde:	77fb      	strb	r3, [r7, #31]
 8002de0:	e05b      	b.n	8002e9a <UART_SetConfig+0x212>
 8002de2:	2308      	movs	r3, #8
 8002de4:	77fb      	strb	r3, [r7, #31]
 8002de6:	e058      	b.n	8002e9a <UART_SetConfig+0x212>
 8002de8:	2310      	movs	r3, #16
 8002dea:	77fb      	strb	r3, [r7, #31]
 8002dec:	e055      	b.n	8002e9a <UART_SetConfig+0x212>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a47      	ldr	r2, [pc, #284]	; (8002f10 <UART_SetConfig+0x288>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d124      	bne.n	8002e42 <UART_SetConfig+0x1ba>
 8002df8:	4b42      	ldr	r3, [pc, #264]	; (8002f04 <UART_SetConfig+0x27c>)
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e04:	d011      	beq.n	8002e2a <UART_SetConfig+0x1a2>
 8002e06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e0a:	d817      	bhi.n	8002e3c <UART_SetConfig+0x1b4>
 8002e0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e10:	d011      	beq.n	8002e36 <UART_SetConfig+0x1ae>
 8002e12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e16:	d811      	bhi.n	8002e3c <UART_SetConfig+0x1b4>
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <UART_SetConfig+0x19c>
 8002e1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e20:	d006      	beq.n	8002e30 <UART_SetConfig+0x1a8>
 8002e22:	e00b      	b.n	8002e3c <UART_SetConfig+0x1b4>
 8002e24:	2300      	movs	r3, #0
 8002e26:	77fb      	strb	r3, [r7, #31]
 8002e28:	e037      	b.n	8002e9a <UART_SetConfig+0x212>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	77fb      	strb	r3, [r7, #31]
 8002e2e:	e034      	b.n	8002e9a <UART_SetConfig+0x212>
 8002e30:	2304      	movs	r3, #4
 8002e32:	77fb      	strb	r3, [r7, #31]
 8002e34:	e031      	b.n	8002e9a <UART_SetConfig+0x212>
 8002e36:	2308      	movs	r3, #8
 8002e38:	77fb      	strb	r3, [r7, #31]
 8002e3a:	e02e      	b.n	8002e9a <UART_SetConfig+0x212>
 8002e3c:	2310      	movs	r3, #16
 8002e3e:	77fb      	strb	r3, [r7, #31]
 8002e40:	e02b      	b.n	8002e9a <UART_SetConfig+0x212>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a33      	ldr	r2, [pc, #204]	; (8002f14 <UART_SetConfig+0x28c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d124      	bne.n	8002e96 <UART_SetConfig+0x20e>
 8002e4c:	4b2d      	ldr	r3, [pc, #180]	; (8002f04 <UART_SetConfig+0x27c>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002e54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e58:	d011      	beq.n	8002e7e <UART_SetConfig+0x1f6>
 8002e5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e5e:	d817      	bhi.n	8002e90 <UART_SetConfig+0x208>
 8002e60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e64:	d011      	beq.n	8002e8a <UART_SetConfig+0x202>
 8002e66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e6a:	d811      	bhi.n	8002e90 <UART_SetConfig+0x208>
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <UART_SetConfig+0x1f0>
 8002e70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e74:	d006      	beq.n	8002e84 <UART_SetConfig+0x1fc>
 8002e76:	e00b      	b.n	8002e90 <UART_SetConfig+0x208>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	77fb      	strb	r3, [r7, #31]
 8002e7c:	e00d      	b.n	8002e9a <UART_SetConfig+0x212>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	77fb      	strb	r3, [r7, #31]
 8002e82:	e00a      	b.n	8002e9a <UART_SetConfig+0x212>
 8002e84:	2304      	movs	r3, #4
 8002e86:	77fb      	strb	r3, [r7, #31]
 8002e88:	e007      	b.n	8002e9a <UART_SetConfig+0x212>
 8002e8a:	2308      	movs	r3, #8
 8002e8c:	77fb      	strb	r3, [r7, #31]
 8002e8e:	e004      	b.n	8002e9a <UART_SetConfig+0x212>
 8002e90:	2310      	movs	r3, #16
 8002e92:	77fb      	strb	r3, [r7, #31]
 8002e94:	e001      	b.n	8002e9a <UART_SetConfig+0x212>
 8002e96:	2310      	movs	r3, #16
 8002e98:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ea2:	d16b      	bne.n	8002f7c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002ea4:	7ffb      	ldrb	r3, [r7, #31]
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d838      	bhi.n	8002f1c <UART_SetConfig+0x294>
 8002eaa:	a201      	add	r2, pc, #4	; (adr r2, 8002eb0 <UART_SetConfig+0x228>)
 8002eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb0:	08002ed5 	.word	0x08002ed5
 8002eb4:	08002edd 	.word	0x08002edd
 8002eb8:	08002ee5 	.word	0x08002ee5
 8002ebc:	08002f1d 	.word	0x08002f1d
 8002ec0:	08002eeb 	.word	0x08002eeb
 8002ec4:	08002f1d 	.word	0x08002f1d
 8002ec8:	08002f1d 	.word	0x08002f1d
 8002ecc:	08002f1d 	.word	0x08002f1d
 8002ed0:	08002ef3 	.word	0x08002ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ed4:	f7ff fad4 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
 8002ed8:	61b8      	str	r0, [r7, #24]
        break;
 8002eda:	e024      	b.n	8002f26 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002edc:	f7ff faf2 	bl	80024c4 <HAL_RCC_GetPCLK2Freq>
 8002ee0:	61b8      	str	r0, [r7, #24]
        break;
 8002ee2:	e020      	b.n	8002f26 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <UART_SetConfig+0x290>)
 8002ee6:	61bb      	str	r3, [r7, #24]
        break;
 8002ee8:	e01d      	b.n	8002f26 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eea:	f7ff fa53 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 8002eee:	61b8      	str	r0, [r7, #24]
        break;
 8002ef0:	e019      	b.n	8002f26 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ef6:	61bb      	str	r3, [r7, #24]
        break;
 8002ef8:	e015      	b.n	8002f26 <UART_SetConfig+0x29e>
 8002efa:	bf00      	nop
 8002efc:	efff69f3 	.word	0xefff69f3
 8002f00:	40013800 	.word	0x40013800
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40004400 	.word	0x40004400
 8002f0c:	40004800 	.word	0x40004800
 8002f10:	40004c00 	.word	0x40004c00
 8002f14:	40005000 	.word	0x40005000
 8002f18:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	77bb      	strb	r3, [r7, #30]
        break;
 8002f24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d073      	beq.n	8003014 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	005a      	lsls	r2, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	085b      	lsrs	r3, r3, #1
 8002f36:	441a      	add	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b0f      	cmp	r3, #15
 8002f46:	d916      	bls.n	8002f76 <UART_SetConfig+0x2ee>
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4e:	d212      	bcs.n	8002f76 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f023 030f 	bic.w	r3, r3, #15
 8002f58:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	085b      	lsrs	r3, r3, #1
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	89fb      	ldrh	r3, [r7, #14]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	89fa      	ldrh	r2, [r7, #14]
 8002f72:	60da      	str	r2, [r3, #12]
 8002f74:	e04e      	b.n	8003014 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	77bb      	strb	r3, [r7, #30]
 8002f7a:	e04b      	b.n	8003014 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f7c:	7ffb      	ldrb	r3, [r7, #31]
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d827      	bhi.n	8002fd2 <UART_SetConfig+0x34a>
 8002f82:	a201      	add	r2, pc, #4	; (adr r2, 8002f88 <UART_SetConfig+0x300>)
 8002f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f88:	08002fad 	.word	0x08002fad
 8002f8c:	08002fb5 	.word	0x08002fb5
 8002f90:	08002fbd 	.word	0x08002fbd
 8002f94:	08002fd3 	.word	0x08002fd3
 8002f98:	08002fc3 	.word	0x08002fc3
 8002f9c:	08002fd3 	.word	0x08002fd3
 8002fa0:	08002fd3 	.word	0x08002fd3
 8002fa4:	08002fd3 	.word	0x08002fd3
 8002fa8:	08002fcb 	.word	0x08002fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fac:	f7ff fa68 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
 8002fb0:	61b8      	str	r0, [r7, #24]
        break;
 8002fb2:	e013      	b.n	8002fdc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fb4:	f7ff fa86 	bl	80024c4 <HAL_RCC_GetPCLK2Freq>
 8002fb8:	61b8      	str	r0, [r7, #24]
        break;
 8002fba:	e00f      	b.n	8002fdc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fbc:	4b1b      	ldr	r3, [pc, #108]	; (800302c <UART_SetConfig+0x3a4>)
 8002fbe:	61bb      	str	r3, [r7, #24]
        break;
 8002fc0:	e00c      	b.n	8002fdc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fc2:	f7ff f9e7 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 8002fc6:	61b8      	str	r0, [r7, #24]
        break;
 8002fc8:	e008      	b.n	8002fdc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fce:	61bb      	str	r3, [r7, #24]
        break;
 8002fd0:	e004      	b.n	8002fdc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	77bb      	strb	r3, [r7, #30]
        break;
 8002fda:	bf00      	nop
    }

    if (pclk != 0U)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d018      	beq.n	8003014 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	085a      	lsrs	r2, r3, #1
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	441a      	add	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b0f      	cmp	r3, #15
 8002ffa:	d909      	bls.n	8003010 <UART_SetConfig+0x388>
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003002:	d205      	bcs.n	8003010 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	b29a      	uxth	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60da      	str	r2, [r3, #12]
 800300e:	e001      	b.n	8003014 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003020:	7fbb      	ldrb	r3, [r7, #30]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3720      	adds	r7, #32
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	007a1200 	.word	0x007a1200

08003030 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00a      	beq.n	800305a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01a      	beq.n	8003146 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800312e:	d10a      	bne.n	8003146 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	605a      	str	r2, [r3, #4]
  }
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b098      	sub	sp, #96	; 0x60
 8003178:	af02      	add	r7, sp, #8
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003184:	f7fd fba0 	bl	80008c8 <HAL_GetTick>
 8003188:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b08      	cmp	r3, #8
 8003196:	d12e      	bne.n	80031f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003198:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031a0:	2200      	movs	r2, #0
 80031a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f88c 	bl	80032c4 <UART_WaitOnFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d021      	beq.n	80031f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ba:	e853 3f00 	ldrex	r3, [r3]
 80031be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c6:	653b      	str	r3, [r7, #80]	; 0x50
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031d0:	647b      	str	r3, [r7, #68]	; 0x44
 80031d2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031d8:	e841 2300 	strex	r3, r2, [r1]
 80031dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1e6      	bne.n	80031b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e062      	b.n	80032bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b04      	cmp	r3, #4
 8003202:	d149      	bne.n	8003298 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003204:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800320c:	2200      	movs	r2, #0
 800320e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f856 	bl	80032c4 <UART_WaitOnFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d03c      	beq.n	8003298 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	e853 3f00 	ldrex	r3, [r3]
 800322a:	623b      	str	r3, [r7, #32]
   return(result);
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800323c:	633b      	str	r3, [r7, #48]	; 0x30
 800323e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003240:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003244:	e841 2300 	strex	r3, r2, [r1]
 8003248:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800324a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e6      	bne.n	800321e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3308      	adds	r3, #8
 8003256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	e853 3f00 	ldrex	r3, [r3]
 800325e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0301 	bic.w	r3, r3, #1
 8003266:	64bb      	str	r3, [r7, #72]	; 0x48
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3308      	adds	r3, #8
 800326e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003270:	61fa      	str	r2, [r7, #28]
 8003272:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003274:	69b9      	ldr	r1, [r7, #24]
 8003276:	69fa      	ldr	r2, [r7, #28]
 8003278:	e841 2300 	strex	r3, r2, [r1]
 800327c:	617b      	str	r3, [r7, #20]
   return(result);
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1e5      	bne.n	8003250 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2220      	movs	r2, #32
 8003288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e011      	b.n	80032bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2220      	movs	r2, #32
 800329c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3758      	adds	r7, #88	; 0x58
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	4613      	mov	r3, r2
 80032d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032d4:	e049      	b.n	800336a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032dc:	d045      	beq.n	800336a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032de:	f7fd faf3 	bl	80008c8 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d302      	bcc.n	80032f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e048      	b.n	800338a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b00      	cmp	r3, #0
 8003304:	d031      	beq.n	800336a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b08      	cmp	r3, #8
 8003312:	d110      	bne.n	8003336 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2208      	movs	r2, #8
 800331a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 f838 	bl	8003392 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2208      	movs	r2, #8
 8003326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e029      	b.n	800338a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003344:	d111      	bne.n	800336a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800334e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f81e 	bl	8003392 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2220      	movs	r2, #32
 800335a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e00f      	b.n	800338a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69da      	ldr	r2, [r3, #28]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	4013      	ands	r3, r2
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	429a      	cmp	r2, r3
 8003378:	bf0c      	ite	eq
 800337a:	2301      	moveq	r3, #1
 800337c:	2300      	movne	r3, #0
 800337e:	b2db      	uxtb	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	429a      	cmp	r2, r3
 8003386:	d0a6      	beq.n	80032d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003392:	b480      	push	{r7}
 8003394:	b095      	sub	sp, #84	; 0x54
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a2:	e853 3f00 	ldrex	r3, [r3]
 80033a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	461a      	mov	r2, r3
 80033b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b8:	643b      	str	r3, [r7, #64]	; 0x40
 80033ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033c0:	e841 2300 	strex	r3, r2, [r1]
 80033c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1e6      	bne.n	800339a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3308      	adds	r3, #8
 80033d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	e853 3f00 	ldrex	r3, [r3]
 80033da:	61fb      	str	r3, [r7, #28]
   return(result);
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f023 0301 	bic.w	r3, r3, #1
 80033e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3308      	adds	r3, #8
 80033ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033f4:	e841 2300 	strex	r3, r2, [r1]
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1e5      	bne.n	80033cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003404:	2b01      	cmp	r3, #1
 8003406:	d118      	bne.n	800343a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	e853 3f00 	ldrex	r3, [r3]
 8003414:	60bb      	str	r3, [r7, #8]
   return(result);
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f023 0310 	bic.w	r3, r3, #16
 800341c:	647b      	str	r3, [r7, #68]	; 0x44
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003426:	61bb      	str	r3, [r7, #24]
 8003428:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342a:	6979      	ldr	r1, [r7, #20]
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	e841 2300 	strex	r3, r2, [r1]
 8003432:	613b      	str	r3, [r7, #16]
   return(result);
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1e6      	bne.n	8003408 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2220      	movs	r2, #32
 800343e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800344e:	bf00      	nop
 8003450:	3754      	adds	r7, #84	; 0x54
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <memset>:
 800345a:	4402      	add	r2, r0
 800345c:	4603      	mov	r3, r0
 800345e:	4293      	cmp	r3, r2
 8003460:	d100      	bne.n	8003464 <memset+0xa>
 8003462:	4770      	bx	lr
 8003464:	f803 1b01 	strb.w	r1, [r3], #1
 8003468:	e7f9      	b.n	800345e <memset+0x4>
	...

0800346c <__libc_init_array>:
 800346c:	b570      	push	{r4, r5, r6, lr}
 800346e:	4d0d      	ldr	r5, [pc, #52]	; (80034a4 <__libc_init_array+0x38>)
 8003470:	4c0d      	ldr	r4, [pc, #52]	; (80034a8 <__libc_init_array+0x3c>)
 8003472:	1b64      	subs	r4, r4, r5
 8003474:	10a4      	asrs	r4, r4, #2
 8003476:	2600      	movs	r6, #0
 8003478:	42a6      	cmp	r6, r4
 800347a:	d109      	bne.n	8003490 <__libc_init_array+0x24>
 800347c:	4d0b      	ldr	r5, [pc, #44]	; (80034ac <__libc_init_array+0x40>)
 800347e:	4c0c      	ldr	r4, [pc, #48]	; (80034b0 <__libc_init_array+0x44>)
 8003480:	f000 f818 	bl	80034b4 <_init>
 8003484:	1b64      	subs	r4, r4, r5
 8003486:	10a4      	asrs	r4, r4, #2
 8003488:	2600      	movs	r6, #0
 800348a:	42a6      	cmp	r6, r4
 800348c:	d105      	bne.n	800349a <__libc_init_array+0x2e>
 800348e:	bd70      	pop	{r4, r5, r6, pc}
 8003490:	f855 3b04 	ldr.w	r3, [r5], #4
 8003494:	4798      	blx	r3
 8003496:	3601      	adds	r6, #1
 8003498:	e7ee      	b.n	8003478 <__libc_init_array+0xc>
 800349a:	f855 3b04 	ldr.w	r3, [r5], #4
 800349e:	4798      	blx	r3
 80034a0:	3601      	adds	r6, #1
 80034a2:	e7f2      	b.n	800348a <__libc_init_array+0x1e>
 80034a4:	08003504 	.word	0x08003504
 80034a8:	08003504 	.word	0x08003504
 80034ac:	08003504 	.word	0x08003504
 80034b0:	08003508 	.word	0x08003508

080034b4 <_init>:
 80034b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b6:	bf00      	nop
 80034b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ba:	bc08      	pop	{r3}
 80034bc:	469e      	mov	lr, r3
 80034be:	4770      	bx	lr

080034c0 <_fini>:
 80034c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c2:	bf00      	nop
 80034c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034c6:	bc08      	pop	{r3}
 80034c8:	469e      	mov	lr, r3
 80034ca:	4770      	bx	lr
